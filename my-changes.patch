diff --git a/README.md b/README.md
new file mode 100644
index 0000000..d44557a
--- /dev/null
+++ b/README.md
@@ -0,0 +1,186 @@
+# Topcoder Member API v6
+
+## Overview
+
+The Topcoder Member API provides endpoints to manage member profiles, statistics, and history. All protected endpoints require authentication and proper authorization.
+
+---
+
+## API Endpoints
+
+| Method | Endpoint                                 | Description                                 |
+|--------|------------------------------------------|---------------------------------------------|
+| GET    | /v6/members/:handle                      | Get member profile by handle                |
+| PATCH  | /v6/members/:handle                      | Update member profile                       |
+| POST   | /v6/members/:handle/photo                | Upload member photo                         |
+| GET    | /v6/members/:handle/stats                | Get current member stats                    |
+| POST   | /v6/members/:handle/stats                | Create member stats                         |
+| PATCH  | /v6/members/:handle/stats                | Partially update member stats               |
+| GET    | /v6/members/:handle/stats/history        | Get member stats history                    |
+| POST   | /v6/members/:handle/stats/history        | Create stats history for a member           |
+| PATCH  | /v6/members/:handle/stats/history        | Partially update stats history for a member |
+| GET    | /v6/members/:handle/traits               | Get member traits                           |
+| POST   | /v6/members/:handle/traits               | Create member traits                        |
+| PATCH  | /v6/members/:handle/traits               | Update member traits                        |
+| DELETE | /v6/members/:handle/traits               | Remove member traits                        |
+| GET    | /v6/members/health                       | Health check endpoint                       |
+
+See `docs/swagger.yaml` for full details and request/response schemas.
+
+---
+
+## Setup Instructions
+
+### 1. Prerequisites
+- **Node.js** v18 or later
+- **npm** v8 or later
+- **Docker** (for PostgreSQL)
+
+### 2. Clone the Repository
+```bash
+git clone <repo-url>
+cd member-api-v6
+```
+
+### 3. Install Dependencies
+```bash
+npm install
+```
+
+### 4. Configure Environment Variables
+Create a `.env` file in the project root (or use `.env.example` if provided). Example:
+```env
+DATABASE_URL=postgresql://johndoe:mypassword@localhost:5432/memberdb
+AUTH0_URL=http://localhost:4000/v5/auth0
+AUTH0_AUDIENCE=topcoder-dev
+AUTH0_CLIENT_ID=xyz
+AUTH0_CLIENT_SECRET=xyz
+BUSAPI_URL=http://localhost:4000/v5
+GROUPS_API_URL=http://localhost:4000/v5/groups
+PORT=3000
+# Add any other required variables as needed
+```
+
+**Note:**
+- For local development, the mock API server will handle Auth0 and event bus endpoints.
+- See `config/default.js` for all available configuration options.
+
+### 5. Start PostgreSQL Database (via Docker)
+```bash
+docker run -d --name memberdb -p 5432:5432 \
+  -e POSTGRES_USER=johndoe -e POSTGRES_DB=memberdb \
+  -e POSTGRES_PASSWORD=mypassword \
+  postgres:16
+```
+
+### 6. Initialize and Seed the Database
+```bash
+npm run init-db
+node src/scripts/seed-testdata-api.js
+```
+- This will apply Prisma migrations and load test data from `test_data_api.json`.
+
+### 7. Start the Mock API Server (for Auth0 and Event Bus)
+```bash
+node mock/mock-api.js
+```
+- This must be running for local development and tests to pass.
+
+### 8. Start the API Server
+```bash
+npm start
+```
+- The API will be available at [http://localhost:3000/v6/members/health](http://localhost:3000/v6/members/health)
+
+---
+
+## Environment Variables
+
+| Variable                       | Description                                 |
+|------------------------------- |---------------------------------------------|
+| DATABASE_URL                   | PostgreSQL connection string                |
+| AUTH0_URL                      | Auth0 base URL (use mock for local)         |
+| AUTH0_AUDIENCE                 | Auth0 audience (for JWT validation)         |
+| AUTH0_CLIENT_ID                | Auth0 client ID                             |
+| AUTH0_CLIENT_SECRET            | Auth0 client secret                         |
+| BUSAPI_URL                     | Event bus API URL (use mock for local)      |
+| GROUPS_API_URL                 | Groups API URL (use mock for local)         |
+| PORT                           | API server port (default: 3000)             |
+| KAFKA_ERROR_TOPIC              | Kafka error topic (if used)                 |
+| AMAZON.AWS_ACCESS_KEY_ID       | AWS S3 config (if using photo upload)       |
+| AMAZON.AWS_SECRET_ACCESS_KEY   | AWS S3 config                               |
+| AMAZON.AWS_REGION              | AWS S3 config                               |
+| AMAZON.PHOTO_S3_BUCKET         | AWS S3 config                               |
+
+---
+
+## Running Tests
+
+### 1. Unit and Integration Tests
+```bash
+npm test
+```
+- Runs all unit and integration tests in the `test/unit/` directory.
+- Requires the database, mock API, and environment variables to be set up as above.
+
+### 2. Test Data
+- The script `src/scripts/seed-testdata-api.js` loads comprehensive test data from `test_data_api.json`.
+- Ensure the database is seeded before running tests.
+
+### 3. Postman Collection
+- Import `docs/Member API.postman_collection.json` into Postman for ready-to-use requests and examples.
+
+---
+
+## API Documentation
+- The OpenAPI/Swagger spec is in `docs/swagger.yaml`.
+- All endpoints, request/response schemas, and error codes are documented there.
+
+---
+
+## How to Verify the Code
+
+1. **Check API Health:**
+   - Visit [http://localhost:3000/v6/members/health](http://localhost:3000/v6/members/health) to verify the server is running.
+
+2. **Run Tests:**
+   - Run `npm test` and ensure all tests pass.
+
+3. **Seed and Validate Data:**
+   - Use `node src/scripts/seed-testdata-api.js` to load test data.
+   - Optionally, use `src/scripts/validate-seeded-data.js` to compare local data with the deployed API.
+
+4. **Use Postman:**
+   - Use the provided Postman collection to test all endpoints interactively.
+
+5. **Check API Documentation:**
+   - Review `docs/swagger.yaml` for endpoint details and try requests using Swagger UI if set up.
+
+---
+
+## Troubleshooting
+- Ensure Docker is running and the `memberdb` container is up.
+- Ensure the mock API server (`node mock/mock-api.js`) is running for local Auth0 and event bus endpoints.
+- Double-check all environment variables are set (see above).
+- If you change the Prisma schema, re-run `npm run init-db` and reseed the database.
+
+---
+
+## Common Errors & Solutions
+
+| Error Message / Symptom                        | Possible Cause & Solution                                                                 |
+|------------------------------------------------|------------------------------------------------------------------------------------------|
+| `Can't reach database server at localhost:5432`| PostgreSQL is not running. Start Docker container with the provided command.              |
+| `Error: "AUTH0_URL" is required`              | Missing environment variable. Set `AUTH0_URL` in your `.env` or export it in your shell.  |
+| `connect ECONNREFUSED 127.0.0.1:4000`          | Mock API server is not running. Start it with `node mock/mock-api.js`.                   |
+| `ValidationError: ... is not allowed`          | Request contains unexpected fields. Check your payload and match the API schema.          |
+| `ValidationError: ... is required`             | Missing required field in request. Check the API docs and provide all required fields.   |
+| `Error: Member with handle: "other" doesn't exist` | The member handle does not exist in the database. Seed test data or use a valid handle. |
+| `Error: The trait id ... already exists`       | Duplicate trait creation. Use PATCH to update or DELETE to remove before re-adding.       |
+| `Error: NotFoundError: ... is not found`       | Resource does not exist. Check your IDs and seed data.                                   |
+| `Error: ForbiddenError: You are not allowed ...`| Insufficient permissions. Use a user with the correct roles/scopes.                      |
+| `Error: Unexpected error occurred`             | Check logs for stack trace. Ensure all services and dependencies are running.             |
+
+---
+
+For further details or issues, see the project documentation or contact the maintainers.
diff --git a/docs/Member API.postman_collection.json b/docs/Member API.postman_collection.json
index 88e73c9..881a9d8 100644
--- a/docs/Member API.postman_collection.json	
+++ b/docs/Member API.postman_collection.json	
@@ -802,6 +802,130 @@
 						}
 					},
 					"response": []
+				},
+				{
+					"name": "Create History Stats",
+					"request": {
+						"auth": {
+							"type": "bearer",
+							"bearer": [
+								{ "key": "token", "value": "{{token}}", "type": "string" }
+							]
+						},
+						"method": "POST",
+						"header": [
+							{ "key": "Content-Type", "value": "application/json" }
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"develop\": [\n    {\n      \"challengeId\": 123,\n      \"challengeName\": \"Challenge Example\",\n      \"ratingDate\": \"2023-01-01\",\n      \"newRating\": 1500,\n      \"subTrack\": \"SRM\",\n      \"subTrackId\": 1\n    }\n  ]\n}"
+						},
+						"url": {
+							"raw": "{{baseUrl}}/v6/members/{{handle}}/stats/history",
+							"host": [ "{{baseUrl}}" ],
+							"path": [ "v6", "members", "{{handle}}", "stats", "history" ]
+						}
+					},
+					"response": [
+						{
+							"code": 201,
+							"body": "{\n  \"id\": 1,\n  \"userId\": 1,\n  \"develop\": [\n    {\n      \"challengeId\": 123,\n      \"challengeName\": \"Challenge Example\",\n      \"ratingDate\": \"2023-01-01T00:00:00.000Z\",\n      \"newRating\": 1500,\n      \"subTrack\": \"SRM\",\n      \"subTrackId\": 1\n    }\n  ]\n}",
+							"header": [ { "key": "Content-Type", "value": "application/json" } ]
+						}
+					]
+				},
+				{
+					"name": "Update History Stats",
+					"request": {
+						"auth": {
+							"type": "bearer",
+							"bearer": [
+								{ "key": "token", "value": "{{token}}", "type": "string" }
+							]
+						},
+						"method": "PATCH",
+						"header": [
+							{ "key": "Content-Type", "value": "application/json" }
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"develop\": [\n    {\n      \"challengeId\": 123,\n      \"challengeName\": \"Patched Challenge\",\n      \"ratingDate\": \"2023-01-01\",\n      \"newRating\": 1550,\n      \"subTrack\": \"SRM\",\n      \"subTrackId\": 1\n    }\n  ]\n}"
+						},
+						"url": {
+							"raw": "{{baseUrl}}/v6/members/{{handle}}/stats/history",
+							"host": [ "{{baseUrl}}" ],
+							"path": [ "v6", "members", "{{handle}}", "stats", "history" ]
+						}
+					},
+					"response": [
+						{
+							"code": 200,
+							"body": "{\n  \"id\": 1,\n  \"userId\": 1,\n  \"develop\": [\n    {\n      \"challengeId\": 123,\n      \"challengeName\": \"Patched Challenge\",\n      \"ratingDate\": \"2023-01-01T00:00:00.000Z\",\n      \"newRating\": 1550,\n      \"subTrack\": \"SRM\",\n      \"subTrackId\": 1\n    }\n  ]\n}",
+							"header": [ { "key": "Content-Type", "value": "application/json" } ]
+						}
+					]
+				},
+				{
+					"name": "Create Member Stats",
+					"request": {
+						"auth": {
+							"type": "bearer",
+							"bearer": [
+								{ "key": "token", "value": "{{token}}", "type": "string" }
+							]
+						},
+						"method": "POST",
+						"header": [
+							{ "key": "Content-Type", "value": "application/json" }
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"challenges\": 10,\n  \"wins\": 3,\n  \"develop\": {\n    \"challenges\": 5,\n    \"wins\": 2,\n    \"mostRecentSubmission\": \"2023-03-01\",\n    \"mostRecentEventDate\": \"2023-03-02\",\n    \"items\": [\n      {\n        \"name\": \"SRM\",\n        \"subTrackId\": 1,\n        \"challenges\": 2,\n        \"wins\": 1\n      }\n    ]\n  },\n  \"design\": {\n    \"challenges\": 2,\n    \"wins\": 1,\n    \"items\": []\n  },\n  \"dataScience\": {\n    \"challenges\": 1,\n    \"wins\": 0,\n    \"items\": []\n  },\n  \"copilot\": {\n    \"challenges\": 0,\n    \"wins\": 0,\n    \"items\": []\n  }\n}"
+						},
+						"url": {
+							"raw": "{{baseUrl}}/v6/members/{{handle}}/stats",
+							"host": [ "{{baseUrl}}" ],
+							"path": [ "v6", "members", "{{handle}}", "stats" ]
+						}
+					},
+					"response": [
+						{
+							"code": 201,
+							"body": "{\n  \"id\": 1,\n  \"userId\": 1,\n  \"develop\": {\n    \"challenges\": 5,\n    \"wins\": 2,\n    \"mostRecentSubmission\": \"2023-03-01T00:00:00.000Z\",\n    \"mostRecentEventDate\": \"2023-03-02T00:00:00.000Z\",\n    \"items\": [\n      {\n        \"name\": \"SRM\",\n        \"subTrackId\": 1,\n        \"challenges\": 2,\n        \"wins\": 1\n      }\n    ]\n  },\n  \"design\": {\n    \"challenges\": 2,\n    \"wins\": 1,\n    \"items\": []\n  },\n  \"dataScience\": {\n    \"challenges\": 1,\n    \"wins\": 0,\n    \"items\": []\n  },\n  \"copilot\": {\n    \"challenges\": 0,\n    \"wins\": 0,\n    \"items\": []\n  }\n}",
+							"header": [ { "key": "Content-Type", "value": "application/json" } ]
+						}
+					]
+				},
+				{
+					"name": "Update Member Stats",
+					"request": {
+						"auth": {
+							"type": "bearer",
+							"bearer": [
+								{ "key": "token", "value": "{{token}}", "type": "string" }
+							]
+						},
+						"method": "PATCH",
+						"header": [
+							{ "key": "Content-Type", "value": "application/json" }
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"develop\": {\n    \"items\": [\n      {\n        \"name\": \"SRM Patched\",\n        \"subTrackId\": 1,\n        \"challenges\": 3,\n        \"wins\": 2\n      }\n    ]\n  }\n}"
+						},
+						"url": {
+							"raw": "{{baseUrl}}/v6/members/{{handle}}/stats",
+							"host": [ "{{baseUrl}}" ],
+							"path": [ "v6", "members", "{{handle}}", "stats" ]
+						}
+					},
+					"response": [
+						{
+							"code": 200,
+							"body": "{\n  \"id\": 1,\n  \"userId\": 1,\n  \"develop\": {\n    \"items\": [\n      {\n        \"name\": \"SRM Patched\",\n        \"subTrackId\": 1,\n        \"challenges\": 3,\n        \"wins\": 2\n      }\n    ]\n  }\n}",
+							"header": [ { "key": "Content-Type", "value": "application/json" } ]
+						}
+					]
 				}
 			]
 		},
diff --git a/docs/swagger.yaml b/docs/swagger.yaml
index 5fe2d52..a84c090 100644
--- a/docs/swagger.yaml
+++ b/docs/swagger.yaml
@@ -956,11 +956,11 @@ paths:
           description: Internal server error
           schema:
             $ref: '#/definitions/ErrorModel'
-  '/members/{handle}/stats':
+  '/members/{handle}/stats/history':
     get:
       tags:
         - Statistics
-      description: get member stats
+      description: Get member history statistics, by default only returns the public topcoder history statistics.
       parameters:
         - in: path
           name: handle
@@ -970,7 +970,7 @@ paths:
           in: query
           required: false
           type: string
-          description: comma separated group ids (returns public stats if group ids is not provided)
+          description: comma separated group ids (returns members public history statistics if groupIds is not provided)
         - name: fields
           in: query
           required: false
@@ -978,47 +978,77 @@ paths:
           description: >
             fields=fieldName1,fieldName2,...,fieldN
             
-            parameter for choosing which fields of MemberStats that will be included in response.
-
+            parameter for choosing which fields of Member History Stats that will be included in response.
 
             + userId - Select the field userId
+            
+            + groupId - Select the field groupId
 
             + handle - Select the field handle
 
             + handleLower - Select the field handleLower
 
-            + maxRating - Select the field maxRating
-
-            + challenges - Select the field challenges
-
-            + wins - Select the field wins
-
-            + develop - Select the field develop
-
-            + design - Select the field design
-
-            + dataScience - Select the field dataScience
-
-            + copilot - Select the field copilot
-
-            + updatedAt - Select the field updatedAt
+            + DEVELOP - Select the field DEVELOP
+            
+            + DATA_SCIENCE - Select the field DATA_SCIENCE
 
             + createdAt - Select the field createdAt
 
             + createdBy - Select the field createdBy
+            
+            + updatedAt - Select the field updatedAt
 
             + updatedBy - Select the field updatedBy
       responses:
         '200':
           description: OK
           schema:
-            $ref: '#/definitions/MemberStats'
+            $ref: '#/definitions/MemberHistoryStats'
         '400':
           description: Bad request data
           schema:
             $ref: '#/definitions/ErrorModel'
+        '404':
+          description: Not found
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '500':
+          description: Internal server error
+          schema:
+            $ref: '#/definitions/ErrorModel'
+    post:
+      tags:
+        - Statistics
+      description: Create member stats history for the specified member.
+      security:
+        - bearer: []
+      parameters:
+        - in: path
+          name: handle
+          required: true
+          type: string
+      requestBody:
+        description: Stats history data to create
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/definitions/MemberHistoryStatsRequest'
+      responses:
+        '201':
+          description: Created
+          schema:
+            $ref: '#/definitions/MemberHistoryStats'
+        '400':
+          description: Bad request data
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '401':
+          description: Miss or wrong authentication credentials
+          schema:
+            $ref: '#/definitions/ErrorModel'
         '403':
-          description: No permission to access the API
+          description: No permission
           schema:
             $ref: '#/definitions/ErrorModel'
         '404':
@@ -1029,11 +1059,54 @@ paths:
           description: Internal server error
           schema:
             $ref: '#/definitions/ErrorModel'
-  '/members/{handle}/stats/history':
+    patch:
+      tags:
+        - Statistics
+      description: Partially update member stats history for the specified member.
+      security:
+        - bearer: []
+      parameters:
+        - in: path
+          name: handle
+          required: true
+          type: string
+      requestBody:
+        description: Stats history data to update
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/definitions/MemberHistoryStatsRequest'
+      responses:
+        '200':
+          description: OK
+          schema:
+            $ref: '#/definitions/MemberHistoryStats'
+        '400':
+          description: Bad request data
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '401':
+          description: Miss or wrong authentication credentials
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '403':
+          description: No permission
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '404':
+          description: Not found
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '500':
+          description: Internal server error
+          schema:
+            $ref: '#/definitions/ErrorModel'
+  '/members/{handle}/stats':
     get:
       tags:
         - Statistics
-      description: Get member history statistics, by default only returns the public topcoder history statistics.
+      description: get member stats
       parameters:
         - in: path
           name: handle
@@ -1043,7 +1116,7 @@ paths:
           in: query
           required: false
           type: string
-          description: comma separated group ids (returns members public history statistics if groupIds is not provided)
+          description: comma separated group ids (returns public stats if group ids is not provided)
         - name: fields
           in: query
           required: false
@@ -1051,36 +1124,185 @@ paths:
           description: >
             fields=fieldName1,fieldName2,...,fieldN
             
-            parameter for choosing which fields of Member History Stats that will be included in response.
+            parameter for choosing which fields of MemberStats that will be included in response.
+
             
             + userId - Select the field userId
             
-            + groupId - Select the field groupId
-            
             + handle - Select the field handle
             
             + handleLower - Select the field handleLower
             
-            + DEVELOP - Select the field DEVELOP
-            
-            + DATA_SCIENCE - Select the field DATA_SCIENCE
+            + maxRating - Select the field maxRating
+
+            + challenges - Select the field challenges
+
+            + wins - Select the field wins
+
+            + develop - Select the field develop
+
+            + design - Select the field design
+
+            + dataScience - Select the field dataScience
+
+            + copilot - Select the field copilot
             
+            + updatedAt - Select the field updatedAt
+
             + createdAt - Select the field createdAt
-            
+
             + createdBy - Select the field createdBy
             
-            + updatedAt - Select the field updatedAt
-            
             + updatedBy - Select the field updatedBy
       responses:
         '200':
           description: OK
           schema:
-            $ref: '#/definitions/MemberHistoryStats'
+            $ref: '#/definitions/MemberStats'
         '400':
           description: Bad request data
           schema:
             $ref: '#/definitions/ErrorModel'
+        '403':
+          description: No permission to access the API
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '404':
+          description: Not found
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '500':
+          description: Internal server error
+          schema:
+            $ref: '#/definitions/ErrorModel'
+    post:
+      tags:
+        - Statistics
+      description: Create member stats for the specified member.
+      security:
+        - bearer: []
+      parameters:
+        - in: path
+          name: handle
+          required: true
+          type: string
+      requestBody:
+        description: Member stats data to create
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/definitions/MemberStatsRequest'
+      responses:
+        '201':
+          description: Created
+          schema:
+            $ref: '#/definitions/MemberStats'
+        '400':
+          description: Bad request data
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '401':
+          description: Miss or wrong authentication credentials
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '403':
+          description: No permission
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '404':
+          description: Not found
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '500':
+          description: Internal server error
+          schema:
+            $ref: '#/definitions/ErrorModel'
+    patch:
+      tags:
+        - Statistics
+      description: Partially update member stats for the specified member.
+      security:
+        - bearer: []
+      parameters:
+        - in: path
+          name: handle
+          required: true
+          type: string
+      requestBody:
+        description: Member stats data to update
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/definitions/MemberStatsRequest'
+      responses:
+        '200':
+          description: OK
+          schema:
+            $ref: '#/definitions/MemberStats'
+        '400':
+          description: Bad request data
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '401':
+          description: Miss or wrong authentication credentials
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '403':
+          description: No permission
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '404':
+          description: Not found
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '500':
+          description: Internal server error
+          schema:
+            $ref: '#/definitions/ErrorModel'
+    delete:
+      tags:
+        - Statistics
+      description: delete member profile traits
+      security:
+        - bearer: []
+      parameters:
+        - in: path
+          name: handle
+          required: true
+          type: string
+        - name: traitIds
+          in: query
+          required: false
+          type: string
+          description: |
+            traitIds value separated with comma
+            + basic_id
+            + work
+            + skill
+            + education
+            + communities
+            + languages
+            + hobby
+            + organization
+            + device
+            + software
+            + service_provider
+            + subscription
+            + personalization
+            + connect_info
+      responses:
+        '200':
+          description: 'OK, response is empty'
+        '400':
+          description: Bad request data
+          schema:
+            $ref: '#/definitions/ErrorModel'
+        '403':
+          description: No permission
+          schema:
+            $ref: '#/definitions/ErrorModel'
         '404':
           description: Not found
           schema:
@@ -1817,12 +2039,6 @@ definitions:
                 submissionRate:
                   type: number
                   format: double
-                passedScreening:
-                  type: number
-                  format: int64
-                screeningSuccessRate:
-                  type: number
-                  format: double
                 mostRecentEventDate:
                   type: string
                   format: date-time
@@ -2450,6 +2666,162 @@ definitions:
       message:
         type: string
         description: the error message
+  MemberHistoryStatsRequest:
+    type: object
+    properties:
+      groupId:
+        type: integer
+      isPrivate:
+        type: boolean
+      develop:
+        type: array
+        items:
+          type: object
+          properties:
+            id:
+              type: integer
+            challengeId:
+              type: integer
+            challengeName:
+              type: string
+            ratingDate:
+              type: string
+              format: date-time
+            newRating:
+              type: integer
+            subTrack:
+              type: string
+            subTrackId:
+              type: integer
+      dataScience:
+        type: array
+        items:
+          type: object
+          properties:
+            id:
+              type: integer
+            challengeId:
+              type: integer
+            challengeName:
+              type: string
+            date:
+              type: string
+              format: date-time
+            rating:
+              type: integer
+            placement:
+              type: integer
+            percentile:
+              type: number
+            subTrack:
+              type: string
+            subTrackId:
+              type: integer
+  MemberStatsRequest:
+    type: object
+    properties:
+      challenges:
+        type: integer
+      wins:
+        type: integer
+      groupId:
+        type: integer
+      isPrivate:
+        type: boolean
+      develop:
+        type: object
+        properties:
+          challenges:
+            type: integer
+          wins:
+            type: integer
+          mostRecentSubmission:
+            type: string
+            format: date-time
+          mostRecentEventDate:
+            type: string
+            format: date-time
+          items:
+            type: array
+            items:
+              type: object
+              properties:
+                id:
+                  type: integer
+                name:
+                  type: string
+                subTrackId:
+                  type: integer
+                challenges:
+                  type: integer
+                wins:
+                  type: integer
+      design:
+        type: object
+        properties:
+          challenges:
+            type: integer
+          wins:
+            type: integer
+          items:
+            type: array
+            items:
+              type: object
+              properties:
+                id:
+                  type: integer
+                name:
+                  type: string
+                subTrackId:
+                  type: integer
+                challenges:
+                  type: integer
+                wins:
+                  type: integer
+      dataScience:
+        type: object
+        properties:
+          challenges:
+            type: integer
+          wins:
+            type: integer
+          items:
+            type: array
+            items:
+              type: object
+              properties:
+                id:
+                  type: integer
+                name:
+                  type: string
+                subTrackId:
+                  type: integer
+                challenges:
+                  type: integer
+                wins:
+                  type: integer
+      copilot:
+        type: object
+        properties:
+          challenges:
+            type: integer
+          wins:
+            type: integer
+          items:
+            type: array
+            items:
+              type: object
+              properties:
+                id:
+                  type: integer
+                name:
+                  type: string
+                subTrackId:
+                  type: integer
+                challenges:
+                  type: integer
+                wins:
+                  type: integer
 parameters:
   page:
     name: page
diff --git a/package-lock.json b/package-lock.json
index af26b1b..275b7c7 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -24,9 +24,9 @@
         "file-type-checker": "^1.1.2",
         "get-parameter-names": "^0.3.0",
         "http-status-codes": "^1.3.0",
-        "joi": "^14.0.0",
+        "joi": "^17.13.3",
         "jsonwebtoken": "^8.3.0",
-        "lodash": "^4.17.19",
+        "lodash": "^4.17.21",
         "mime-types": "^2.1.35",
         "moment": "^2.27.0",
         "prisma": "^6.10.1",
@@ -40,6 +40,7 @@
       "devDependencies": {
         "aws-sdk-mock": "^6.2.1",
         "chai": "^4.2.0",
+        "chai-as-promised": "^8.0.1",
         "chai-http": "^4.2.1",
         "mocha": "^11.7.0",
         "mocha-prepare": "^0.1.0",
@@ -77,9 +78,9 @@
       }
     },
     "node_modules/@babel/compat-data": {
-      "version": "7.27.5",
-      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.27.5.tgz",
-      "integrity": "sha512-KiRAp/VoJaWkkte84TvUd9qjdbZAdiqyvMxrGl1N6vzFogKmaLgoM3L1kgtLicp2HP5fBJS8JrZKLVIZGVJAVg==",
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
+      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -87,22 +88,22 @@
       }
     },
     "node_modules/@babel/core": {
-      "version": "7.27.4",
-      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.4.tgz",
-      "integrity": "sha512-bXYxrXFubeYdvB0NhD/NBB3Qi6aZeV20GOWVI47t2dkecCEoneR4NPVcb7abpXDEvejgrUfFtG6vG/zxAKmg+g==",
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
+      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@ampproject/remapping": "^2.2.0",
         "@babel/code-frame": "^7.27.1",
-        "@babel/generator": "^7.27.3",
+        "@babel/generator": "^7.28.0",
         "@babel/helper-compilation-targets": "^7.27.2",
         "@babel/helper-module-transforms": "^7.27.3",
-        "@babel/helpers": "^7.27.4",
-        "@babel/parser": "^7.27.4",
+        "@babel/helpers": "^7.27.6",
+        "@babel/parser": "^7.28.0",
         "@babel/template": "^7.27.2",
-        "@babel/traverse": "^7.27.4",
-        "@babel/types": "^7.27.3",
+        "@babel/traverse": "^7.28.0",
+        "@babel/types": "^7.28.0",
         "convert-source-map": "^2.0.0",
         "debug": "^4.1.0",
         "gensync": "^1.0.0-beta.2",
@@ -160,16 +161,16 @@
       }
     },
     "node_modules/@babel/generator": {
-      "version": "7.27.5",
-      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.5.tgz",
-      "integrity": "sha512-ZGhA37l0e/g2s1Cnzdix0O3aLYm66eF8aufiVteOgnwxgnRP8GoyMj7VWsgWnQbVKXyge7hqrFh2K2TQM6t1Hw==",
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
+      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/parser": "^7.27.5",
-        "@babel/types": "^7.27.3",
-        "@jridgewell/gen-mapping": "^0.3.5",
-        "@jridgewell/trace-mapping": "^0.3.25",
+        "@babel/parser": "^7.28.0",
+        "@babel/types": "^7.28.0",
+        "@jridgewell/gen-mapping": "^0.3.12",
+        "@jridgewell/trace-mapping": "^0.3.28",
         "jsesc": "^3.0.2"
       },
       "engines": {
@@ -203,6 +204,16 @@
         "semver": "bin/semver.js"
       }
     },
+    "node_modules/@babel/helper-globals": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
+      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
     "node_modules/@babel/helper-module-imports": {
       "version": "7.27.1",
       "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
@@ -280,13 +291,13 @@
       }
     },
     "node_modules/@babel/parser": {
-      "version": "7.27.5",
-      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.5.tgz",
-      "integrity": "sha512-OsQd175SxWkGlzbny8J3K8TnnDD0N3lrIUtB92xwyRpzaenGZhxDvxN/JgU00U3CDZNj9tPuDJ5H0WS4Nt3vKg==",
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
+      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/types": "^7.27.3"
+        "@babel/types": "^7.28.0"
       },
       "bin": {
         "parser": "bin/babel-parser.js"
@@ -311,19 +322,19 @@
       }
     },
     "node_modules/@babel/traverse": {
-      "version": "7.27.4",
-      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.4.tgz",
-      "integrity": "sha512-oNcu2QbHqts9BtOWJosOVJapWjBDSxGCpFvikNR5TGDYDQf3JwpIoMzIKrvfoti93cLfPJEG4tH9SPVeyCGgdA==",
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
+      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/code-frame": "^7.27.1",
-        "@babel/generator": "^7.27.3",
-        "@babel/parser": "^7.27.4",
+        "@babel/generator": "^7.28.0",
+        "@babel/helper-globals": "^7.28.0",
+        "@babel/parser": "^7.28.0",
         "@babel/template": "^7.27.2",
-        "@babel/types": "^7.27.3",
-        "debug": "^4.3.1",
-        "globals": "^11.1.0"
+        "@babel/types": "^7.28.0",
+        "debug": "^4.3.1"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -355,9 +366,9 @@
       "license": "MIT"
     },
     "node_modules/@babel/types": {
-      "version": "7.27.6",
-      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.6.tgz",
-      "integrity": "sha512-ETyHEk2VHHvl9b9jZP5IHPavHYk57EhanlRRuae9XCpb/j5bDCbPPMOBfCWhnl/7EDJz0jEMCi/RhccCE8r1+Q==",
+      "version": "7.28.1",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.1.tgz",
+      "integrity": "sha512-x0LvFTekgSX+83TI28Y9wYPUfzrnl2aT5+5QLnO6v7mSJYtEEevuDRN0F0uSHRk1G1IWZC43o00Y0xDDrpBGPQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -389,19 +400,34 @@
       }
     },
     "node_modules/@emnapi/runtime": {
-      "version": "1.4.3",
-      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
-      "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
+      "version": "1.4.4",
+      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.4.tgz",
+      "integrity": "sha512-hHyapA4A3gPaDCNfiqyZUStTMqIkKRshqPIuDOXv1hcBnD4U3l8cP0T1HMCfGRxQ6V64TGCcoswChANyOAwbQg==",
       "license": "MIT",
       "optional": true,
       "dependencies": {
         "tslib": "^2.4.0"
       }
     },
+    "node_modules/@hapi/hoek": {
+      "version": "9.3.0",
+      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
+      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@hapi/topo": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
+      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@hapi/hoek": "^9.0.0"
+      }
+    },
     "node_modules/@img/sharp-darwin-arm64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.2.tgz",
-      "integrity": "sha512-OfXHZPppddivUJnqyKoi5YVeHRkkNE2zUFT2gbpKxp/JZCFYEYubnMg+gOp6lWfasPrTS+KPosKqdI+ELYVDtg==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.3.tgz",
+      "integrity": "sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==",
       "cpu": [
         "arm64"
       ],
@@ -417,13 +443,13 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-darwin-arm64": "1.1.0"
+        "@img/sharp-libvips-darwin-arm64": "1.2.0"
       }
     },
     "node_modules/@img/sharp-darwin-x64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.2.tgz",
-      "integrity": "sha512-dYvWqmjU9VxqXmjEtjmvHnGqF8GrVjM2Epj9rJ6BUIXvk8slvNDJbhGFvIoXzkDhrJC2jUxNLz/GUjjvSzfw+g==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.3.tgz",
+      "integrity": "sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==",
       "cpu": [
         "x64"
       ],
@@ -439,13 +465,13 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-darwin-x64": "1.1.0"
+        "@img/sharp-libvips-darwin-x64": "1.2.0"
       }
     },
     "node_modules/@img/sharp-libvips-darwin-arm64": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.1.0.tgz",
-      "integrity": "sha512-HZ/JUmPwrJSoM4DIQPv/BfNh9yrOA8tlBbqbLz4JZ5uew2+o22Ik+tHQJcih7QJuSa0zo5coHTfD5J8inqj9DA==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.2.0.tgz",
+      "integrity": "sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==",
       "cpu": [
         "arm64"
       ],
@@ -459,9 +485,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-darwin-x64": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.1.0.tgz",
-      "integrity": "sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.2.0.tgz",
+      "integrity": "sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==",
       "cpu": [
         "x64"
       ],
@@ -475,9 +501,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-linux-arm": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.1.0.tgz",
-      "integrity": "sha512-s8BAd0lwUIvYCJyRdFqvsj+BJIpDBSxs6ivrOPm/R7piTs5UIwY5OjXrP2bqXC9/moGsyRa37eYWYCOGVXxVrA==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.2.0.tgz",
+      "integrity": "sha512-mWd2uWvDtL/nvIzThLq3fr2nnGfyr/XMXlq8ZJ9WMR6PXijHlC3ksp0IpuhK6bougvQrchUAfzRLnbsen0Cqvw==",
       "cpu": [
         "arm"
       ],
@@ -491,9 +517,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-linux-arm64": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.1.0.tgz",
-      "integrity": "sha512-IVfGJa7gjChDET1dK9SekxFFdflarnUB8PwW8aGwEoF3oAsSDuNUTYS+SKDOyOJxQyDC1aPFMuRYLoDInyV9Ew==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.2.0.tgz",
+      "integrity": "sha512-RXwd0CgG+uPRX5YYrkzKyalt2OJYRiJQ8ED/fi1tq9WQW2jsQIn0tqrlR5l5dr/rjqq6AHAxURhj2DVjyQWSOA==",
       "cpu": [
         "arm64"
       ],
@@ -507,9 +533,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-linux-ppc64": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.1.0.tgz",
-      "integrity": "sha512-tiXxFZFbhnkWE2LA8oQj7KYR+bWBkiV2nilRldT7bqoEZ4HiDOcePr9wVDAZPi/Id5fT1oY9iGnDq20cwUz8lQ==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.2.0.tgz",
+      "integrity": "sha512-Xod/7KaDDHkYu2phxxfeEPXfVXFKx70EAFZ0qyUdOjCcxbjqyJOEUpDe6RIyaunGxT34Anf9ue/wuWOqBW2WcQ==",
       "cpu": [
         "ppc64"
       ],
@@ -523,9 +549,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-linux-s390x": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.1.0.tgz",
-      "integrity": "sha512-xukSwvhguw7COyzvmjydRb3x/09+21HykyapcZchiCUkTThEQEOMtBj9UhkaBRLuBrgLFzQ2wbxdeCCJW/jgJA==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.2.0.tgz",
+      "integrity": "sha512-eMKfzDxLGT8mnmPJTNMcjfO33fLiTDsrMlUVcp6b96ETbnJmd4uvZxVJSKPQfS+odwfVaGifhsB07J1LynFehw==",
       "cpu": [
         "s390x"
       ],
@@ -539,9 +565,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-linux-x64": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz",
-      "integrity": "sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.2.0.tgz",
+      "integrity": "sha512-ZW3FPWIc7K1sH9E3nxIGB3y3dZkpJlMnkk7z5tu1nSkBoCgw2nSRTFHI5pB/3CQaJM0pdzMF3paf9ckKMSE9Tg==",
       "cpu": [
         "x64"
       ],
@@ -555,9 +581,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.1.0.tgz",
-      "integrity": "sha512-jYZdG+whg0MDK+q2COKbYidaqW/WTz0cc1E+tMAusiDygrM4ypmSCjOJPmFTvHHJ8j/6cAGyeDWZOsK06tP33w==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.2.0.tgz",
+      "integrity": "sha512-UG+LqQJbf5VJ8NWJ5Z3tdIe/HXjuIdo4JeVNADXBFuG7z9zjoegpzzGIyV5zQKi4zaJjnAd2+g2nna8TZvuW9Q==",
       "cpu": [
         "arm64"
       ],
@@ -571,9 +597,9 @@
       }
     },
     "node_modules/@img/sharp-libvips-linuxmusl-x64": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz",
-      "integrity": "sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.2.0.tgz",
+      "integrity": "sha512-SRYOLR7CXPgNze8akZwjoGBoN1ThNZoqpOgfnOxmWsklTGVfJiGJoC/Lod7aNMGA1jSsKWM1+HRX43OP6p9+6Q==",
       "cpu": [
         "x64"
       ],
@@ -587,9 +613,9 @@
       }
     },
     "node_modules/@img/sharp-linux-arm": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.2.tgz",
-      "integrity": "sha512-0DZzkvuEOqQUP9mo2kjjKNok5AmnOr1jB2XYjkaoNRwpAYMDzRmAqUIa1nRi58S2WswqSfPOWLNOr0FDT3H5RQ==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.3.tgz",
+      "integrity": "sha512-oBK9l+h6KBN0i3dC8rYntLiVfW8D8wH+NPNT3O/WBHeW0OQWCjfWksLUaPidsrDKpJgXp3G3/hkmhptAW0I3+A==",
       "cpu": [
         "arm"
       ],
@@ -605,13 +631,13 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-linux-arm": "1.1.0"
+        "@img/sharp-libvips-linux-arm": "1.2.0"
       }
     },
     "node_modules/@img/sharp-linux-arm64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.2.tgz",
-      "integrity": "sha512-D8n8wgWmPDakc83LORcfJepdOSN6MvWNzzz2ux0MnIbOqdieRZwVYY32zxVx+IFUT8er5KPcyU3XXsn+GzG/0Q==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.3.tgz",
+      "integrity": "sha512-QdrKe3EvQrqwkDrtuTIjI0bu6YEJHTgEeqdzI3uWJOH6G1O8Nl1iEeVYRGdj1h5I21CqxSvQp1Yv7xeU3ZewbA==",
       "cpu": [
         "arm64"
       ],
@@ -627,13 +653,35 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-linux-arm64": "1.1.0"
+        "@img/sharp-libvips-linux-arm64": "1.2.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-ppc64": {
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-ppc64/-/sharp-linux-ppc64-0.34.3.tgz",
+      "integrity": "sha512-GLtbLQMCNC5nxuImPR2+RgrviwKwVql28FWZIW1zWruy6zLgA5/x2ZXk3mxj58X/tszVF69KK0Is83V8YgWhLA==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-ppc64": "1.2.0"
       }
     },
     "node_modules/@img/sharp-linux-s390x": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.2.tgz",
-      "integrity": "sha512-EGZ1xwhBI7dNISwxjChqBGELCWMGDvmxZXKjQRuqMrakhO8QoMgqCrdjnAqJq/CScxfRn+Bb7suXBElKQpPDiw==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.3.tgz",
+      "integrity": "sha512-3gahT+A6c4cdc2edhsLHmIOXMb17ltffJlxR0aC2VPZfwKoTGZec6u5GrFgdR7ciJSsHT27BD3TIuGcuRT0KmQ==",
       "cpu": [
         "s390x"
       ],
@@ -649,13 +697,13 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-linux-s390x": "1.1.0"
+        "@img/sharp-libvips-linux-s390x": "1.2.0"
       }
     },
     "node_modules/@img/sharp-linux-x64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.2.tgz",
-      "integrity": "sha512-sD7J+h5nFLMMmOXYH4DD9UtSNBD05tWSSdWAcEyzqW8Cn5UxXvsHAxmxSesYUsTOBmUnjtxghKDl15EvfqLFbQ==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.3.tgz",
+      "integrity": "sha512-8kYso8d806ypnSq3/Ly0QEw90V5ZoHh10yH0HnrzOCr6DKAPI6QVHvwleqMkVQ0m+fc7EH8ah0BB0QPuWY6zJQ==",
       "cpu": [
         "x64"
       ],
@@ -671,13 +719,13 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-linux-x64": "1.1.0"
+        "@img/sharp-libvips-linux-x64": "1.2.0"
       }
     },
     "node_modules/@img/sharp-linuxmusl-arm64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.2.tgz",
-      "integrity": "sha512-NEE2vQ6wcxYav1/A22OOxoSOGiKnNmDzCYFOZ949xFmrWZOVII1Bp3NqVVpvj+3UeHMFyN5eP/V5hzViQ5CZNA==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.3.tgz",
+      "integrity": "sha512-vAjbHDlr4izEiXM1OTggpCcPg9tn4YriK5vAjowJsHwdBIdx0fYRsURkxLG2RLm9gyBq66gwtWI8Gx0/ov+JKQ==",
       "cpu": [
         "arm64"
       ],
@@ -693,13 +741,13 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0"
+        "@img/sharp-libvips-linuxmusl-arm64": "1.2.0"
       }
     },
     "node_modules/@img/sharp-linuxmusl-x64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.2.tgz",
-      "integrity": "sha512-DOYMrDm5E6/8bm/yQLCWyuDJwUnlevR8xtF8bs+gjZ7cyUNYXiSf/E8Kp0Ss5xasIaXSHzb888V1BE4i1hFhAA==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.3.tgz",
+      "integrity": "sha512-gCWUn9547K5bwvOn9l5XGAEjVTTRji4aPTqLzGXHvIr6bIDZKNTA34seMPgM0WmSf+RYBH411VavCejp3PkOeQ==",
       "cpu": [
         "x64"
       ],
@@ -715,20 +763,20 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-libvips-linuxmusl-x64": "1.1.0"
+        "@img/sharp-libvips-linuxmusl-x64": "1.2.0"
       }
     },
     "node_modules/@img/sharp-wasm32": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.2.tgz",
-      "integrity": "sha512-/VI4mdlJ9zkaq53MbIG6rZY+QRN3MLbR6usYlgITEzi4Rpx5S6LFKsycOQjkOGmqTNmkIdLjEvooFKwww6OpdQ==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.3.tgz",
+      "integrity": "sha512-+CyRcpagHMGteySaWos8IbnXcHgfDn7pO2fiC2slJxvNq9gDipYBN42/RagzctVRKgxATmfqOSulgZv5e1RdMg==",
       "cpu": [
         "wasm32"
       ],
       "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
       "optional": true,
       "dependencies": {
-        "@emnapi/runtime": "^1.4.3"
+        "@emnapi/runtime": "^1.4.4"
       },
       "engines": {
         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
@@ -738,9 +786,9 @@
       }
     },
     "node_modules/@img/sharp-win32-arm64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.2.tgz",
-      "integrity": "sha512-cfP/r9FdS63VA5k0xiqaNaEoGxBg9k7uE+RQGzuK9fHt7jib4zAVVseR9LsE4gJcNWgT6APKMNnCcnyOtmSEUQ==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.3.tgz",
+      "integrity": "sha512-MjnHPnbqMXNC2UgeLJtX4XqoVHHlZNd+nPt1kRPmj63wURegwBhZlApELdtxM2OIZDRv/DFtLcNhVbd1z8GYXQ==",
       "cpu": [
         "arm64"
       ],
@@ -757,9 +805,9 @@
       }
     },
     "node_modules/@img/sharp-win32-ia32": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.2.tgz",
-      "integrity": "sha512-QLjGGvAbj0X/FXl8n1WbtQ6iVBpWU7JO94u/P2M4a8CFYsvQi4GW2mRy/JqkRx0qpBzaOdKJKw8uc930EX2AHw==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.3.tgz",
+      "integrity": "sha512-xuCdhH44WxuXgOM714hn4amodJMZl3OEvf0GVTm0BEyMeA2to+8HEdRPShH0SLYptJY1uBw+SCFP9WVQi1Q/cw==",
       "cpu": [
         "ia32"
       ],
@@ -776,9 +824,9 @@
       }
     },
     "node_modules/@img/sharp-win32-x64": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.2.tgz",
-      "integrity": "sha512-aUdT6zEYtDKCaxkofmmJDJYGCf0+pJg3eU9/oBuqvEeoB9dKI6ZLc/1iLJCTuJQDO4ptntAlkUmHgGjyuobZbw==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.3.tgz",
+      "integrity": "sha512-OWwz05d++TxzLEv4VnsTz5CmZ6mI6S05sfQGEMrNrQcOEERbX46332IvE7pO/EUiw7jUrrS40z/M7kPyjfl04g==",
       "cpu": [
         "x64"
       ],
@@ -812,91 +860,6 @@
         "node": ">=12"
       }
     },
-    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
-      "version": "6.1.0",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
-      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
-      "version": "6.2.1",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
-      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/emoji-regex": {
-      "version": "9.2.2",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
-      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@isaacs/cliui/node_modules/string-width": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
-      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "eastasianwidth": "^0.2.0",
-        "emoji-regex": "^9.2.2",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
-      "version": "7.1.0",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
-      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
-      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^6.1.0",
-        "string-width": "^5.0.1",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
     "node_modules/@istanbuljs/load-nyc-config": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
@@ -914,6 +877,16 @@
         "node": ">=8"
       }
     },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
+      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "sprintf-js": "~1.0.2"
+      }
+    },
     "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
@@ -928,6 +901,20 @@
         "node": ">=8"
       }
     },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
+      "version": "3.14.1",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
+      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^1.0.7",
+        "esprima": "^4.0.0"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
     "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
@@ -970,16 +957,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/path-exists": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
-      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/@istanbuljs/schema": {
       "version": "0.1.3",
       "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
@@ -991,18 +968,14 @@
       }
     },
     "node_modules/@jridgewell/gen-mapping": {
-      "version": "0.3.8",
-      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
-      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
+      "version": "0.3.12",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
+      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@jridgewell/set-array": "^1.2.1",
-        "@jridgewell/sourcemap-codec": "^1.4.10",
+        "@jridgewell/sourcemap-codec": "^1.5.0",
         "@jridgewell/trace-mapping": "^0.3.24"
-      },
-      "engines": {
-        "node": ">=6.0.0"
       }
     },
     "node_modules/@jridgewell/resolve-uri": {
@@ -1015,27 +988,17 @@
         "node": ">=6.0.0"
       }
     },
-    "node_modules/@jridgewell/set-array": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
-      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.0.0"
-      }
-    },
     "node_modules/@jridgewell/sourcemap-codec": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
-      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
+      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
       "dev": true,
       "license": "MIT"
     },
     "node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.25",
-      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
-      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
+      "version": "0.3.29",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
+      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -1078,9 +1041,9 @@
       }
     },
     "node_modules/@prisma/client": {
-      "version": "6.10.1",
-      "resolved": "https://registry.npmjs.org/@prisma/client/-/client-6.10.1.tgz",
-      "integrity": "sha512-Re4pMlcUsQsUTAYMK7EJ4Bw2kg3WfZAAlr8GjORJaK4VOP6LxRQUQ1TuLnxcF42XqGkWQ36q5CQF1yVadANQ6w==",
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/@prisma/client/-/client-6.12.0.tgz",
+      "integrity": "sha512-wn98bJ3Cj6edlF4jjpgXwbnQIo/fQLqqQHPk2POrZPxTlhY3+n90SSIF3LMRVa8VzRFC/Gec3YKJRxRu+AIGVA==",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "engines": {
@@ -1100,59 +1063,80 @@
       }
     },
     "node_modules/@prisma/config": {
-      "version": "6.10.1",
-      "resolved": "https://registry.npmjs.org/@prisma/config/-/config-6.10.1.tgz",
-      "integrity": "sha512-kz4/bnqrOrzWo8KzYguN0cden4CzLJJ+2VSpKtF8utHS3l1JS0Lhv6BLwpOX6X9yNreTbZQZwewb+/BMPDCIYQ==",
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/@prisma/config/-/config-6.12.0.tgz",
+      "integrity": "sha512-HovZWzhWEMedHxmjefQBRZa40P81N7/+74khKFz9e1AFjakcIQdXgMWKgt20HaACzY+d1LRBC+L4tiz71t9fkg==",
       "license": "Apache-2.0",
       "dependencies": {
         "jiti": "2.4.2"
       }
     },
     "node_modules/@prisma/debug": {
-      "version": "6.10.1",
-      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-6.10.1.tgz",
-      "integrity": "sha512-k2YT53cWxv9OLjW4zSYTZ6Z7j0gPfCzcr2Mj99qsuvlxr8WAKSZ2NcSR0zLf/mP4oxnYG842IMj3utTgcd7CaA==",
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-6.12.0.tgz",
+      "integrity": "sha512-plbz6z72orcqr0eeio7zgUrZj5EudZUpAeWkFTA/DDdXEj28YHDXuiakvR6S7sD6tZi+jiwQEJAPeV6J6m/tEQ==",
       "license": "Apache-2.0"
     },
     "node_modules/@prisma/engines": {
-      "version": "6.10.1",
-      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-6.10.1.tgz",
-      "integrity": "sha512-Q07P5rS2iPwk2IQr/rUQJ42tHjpPyFcbiH7PXZlV81Ryr9NYIgdxcUrwgVOWVm5T7ap02C0dNd1dpnNcSWig8A==",
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-6.12.0.tgz",
+      "integrity": "sha512-4BRZZUaAuB4p0XhTauxelvFs7IllhPmNLvmla0bO1nkECs8n/o1pUvAVbQ/VOrZR5DnF4HED0PrGai+rIOVePA==",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.10.1",
-        "@prisma/engines-version": "6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c",
-        "@prisma/fetch-engine": "6.10.1",
-        "@prisma/get-platform": "6.10.1"
+        "@prisma/debug": "6.12.0",
+        "@prisma/engines-version": "6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc",
+        "@prisma/fetch-engine": "6.12.0",
+        "@prisma/get-platform": "6.12.0"
       }
     },
     "node_modules/@prisma/engines-version": {
-      "version": "6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c",
-      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c.tgz",
-      "integrity": "sha512-ZJFTsEqapiTYVzXya6TUKYDFnSWCNegfUiG5ik9fleQva5Sk3DNyyUi7X1+0ZxWFHwHDr6BZV5Vm+iwP+LlciA==",
+      "version": "6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc",
+      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc.tgz",
+      "integrity": "sha512-70vhecxBJlRr06VfahDzk9ow4k1HIaSfVUT3X0/kZoHCMl9zbabut4gEXAyzJZxaCGi5igAA7SyyfBI//mmkbQ==",
       "license": "Apache-2.0"
     },
     "node_modules/@prisma/fetch-engine": {
-      "version": "6.10.1",
-      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.10.1.tgz",
-      "integrity": "sha512-clmbG/Jgmrc/n6Y77QcBmAUlq9LrwI9Dbgy4pq5jeEARBpRCWJDJ7PWW1P8p0LfFU0i5fsyO7FqRzRB8mkdS4g==",
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.12.0.tgz",
+      "integrity": "sha512-EamoiwrK46rpWaEbLX9aqKDPOd8IyLnZAkiYXFNuq0YsU0Z8K09/rH8S7feOWAVJ3xzeSgcEJtBlVDrajM9Sag==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.10.1",
-        "@prisma/engines-version": "6.10.1-1.9b628578b3b7cae625e8c927178f15a170e74a9c",
-        "@prisma/get-platform": "6.10.1"
+        "@prisma/debug": "6.12.0",
+        "@prisma/engines-version": "6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc",
+        "@prisma/get-platform": "6.12.0"
       }
     },
     "node_modules/@prisma/get-platform": {
-      "version": "6.10.1",
-      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.10.1.tgz",
-      "integrity": "sha512-4CY5ndKylcsce9Mv+VWp5obbR2/86SHOLVV053pwIkhVtT9C9A83yqiqI/5kJM9T1v1u1qco/bYjDKycmei9HA==",
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.12.0.tgz",
+      "integrity": "sha512-nRerTGhTlgyvcBlyWgt8OLNIV7QgJS2XYXMJD1hysorMCuLAjuDDuoxmVt7C2nLxbuxbWPp7OuFRHC23HqD9dA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.10.1"
+        "@prisma/debug": "6.12.0"
+      }
+    },
+    "node_modules/@sideway/address": {
+      "version": "4.1.5",
+      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.5.tgz",
+      "integrity": "sha512-IqO/DUQHUkPeixNQ8n0JA6102hT9CmaljNTPmQ1u8MEhBo/R4Q8eKLN/vGZxuebwOroDB4cbpjheD4+/sKFK4Q==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@hapi/hoek": "^9.0.0"
       }
     },
+    "node_modules/@sideway/formula": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
+      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@sideway/pinpoint": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
+      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ==",
+      "license": "BSD-3-Clause"
+    },
     "node_modules/@sinonjs/commons": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
@@ -1272,9 +1256,9 @@
       }
     },
     "node_modules/@types/express-serve-static-core": {
-      "version": "5.0.6",
-      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.0.6.tgz",
-      "integrity": "sha512-3xhRnjJPkULekpSzgtoNYYcTWgEZkp4myc+Saevii5JPnHNvHMRlBSHDbs7Bh1iPPoVTERHEZXyhyLbMEsExsA==",
+      "version": "5.0.7",
+      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.0.7.tgz",
+      "integrity": "sha512-R+33OsgWw7rOhD1emjU7dzCDHucJrgJXMA5PYCzJxVil0dsyx5iBEPHqpPfiKNJQb7lZ1vxwoLR4Z87bBUpeGQ==",
       "license": "MIT",
       "dependencies": {
         "@types/node": "*",
@@ -1305,9 +1289,9 @@
       "license": "MIT"
     },
     "node_modules/@types/node": {
-      "version": "24.0.3",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.0.3.tgz",
-      "integrity": "sha512-R4I/kzCYAdRLzfiCabn9hxWfbuHS573x+r0dJMkkzThEa7pbrcDWK+9zu3e7aBOouf+rQAciqPFMnxwr0aWgKg==",
+      "version": "24.0.14",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.0.14.tgz",
+      "integrity": "sha512-4zXMWD91vBLGRtHK3YbIoFMia+1nqEz72coM42C5ETjnNCa/heoj7NT1G67iAfOqMmcfhuCZ4uNpyz8EjlAejw==",
       "license": "MIT",
       "dependencies": {
         "undici-types": "~7.8.0"
@@ -1497,26 +1481,32 @@
       }
     },
     "node_modules/ansi-regex": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.1.tgz",
-      "integrity": "sha512-+O9Jct8wf++lXxxFc4hc8LsjaSq0HFzzL7cVsw8pRDIPdjKD2mT4ytDZlLuSBZ4cLKZFXIrMGO7DbQCtMJJMKw==",
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=4"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
       }
     },
     "node_modules/ansi-styles": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
-      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "color-convert": "^1.9.0"
+        "color-convert": "^2.0.1"
       },
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
     "node_modules/append-transform": {
@@ -1540,14 +1530,11 @@
       "license": "MIT"
     },
     "node_modules/argparse": {
-      "version": "1.0.10",
-      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
-      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "sprintf-js": "~1.0.2"
-      }
+      "license": "Python-2.0"
     },
     "node_modules/array-buffer-byte-length": {
       "version": "1.0.2",
@@ -1726,38 +1713,6 @@
         "node": ">=18.0.0"
       }
     },
-    "node_modules/aws-sdk/node_modules/buffer": {
-      "version": "4.9.2",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-4.9.2.tgz",
-      "integrity": "sha512-xq+q3SRMOxGivLhBNaUdC64hDTQwejJ+H0T/NB1XMtTVEwNTrfFF3gAxiyW0Bu/xWEGhjVKgUcMhCrUy2+uCWg==",
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.0.2",
-        "ieee754": "^1.1.4",
-        "isarray": "^1.0.0"
-      }
-    },
-    "node_modules/aws-sdk/node_modules/events": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/events/-/events-1.1.1.tgz",
-      "integrity": "sha512-kEcvvCBByWXGnZy6JUlgAp2gBIUjfCAV6P6TgT1/aaQKcmuAEC4OZTV1I4EWQLz2gxZw76atuVyvHhTxvi0Flw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.4.x"
-      }
-    },
-    "node_modules/aws-sdk/node_modules/ieee754": {
-      "version": "1.1.13",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.1.13.tgz",
-      "integrity": "sha512-4vf7I2LYV/HaWerSo3XmlMkp5eZ83i+/CDluXi/IGTs/O1sejBNhTtnxzmRZfvOUqj7lZjqHkeTvpgSFDlWZTg==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/aws-sdk/node_modules/isarray": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
-      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
-      "license": "MIT"
-    },
     "node_modules/aws-sdk/node_modules/uuid": {
       "version": "8.0.0",
       "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.0.0.tgz",
@@ -1841,6 +1796,16 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/babel-code-frame/node_modules/escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.0"
+      }
+    },
     "node_modules/babel-code-frame/node_modules/js-tokens": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-3.0.2.tgz",
@@ -1959,14 +1924,13 @@
       }
     },
     "node_modules/brace-expansion": {
-      "version": "1.1.12",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
-      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-      "devOptional": true,
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
+        "balanced-match": "^1.0.0"
       }
     },
     "node_modules/browser-stdout": {
@@ -1977,9 +1941,9 @@
       "license": "ISC"
     },
     "node_modules/browserslist": {
-      "version": "4.25.0",
-      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.0.tgz",
-      "integrity": "sha512-PJ8gYKeS5e/whHBh8xrwYK+dAvEj7JXtz6uTucnMRB8OiGTsKccFekoRrjajPBHV8oOY+2tI4uxeceSimKwMFA==",
+      "version": "4.25.1",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
+      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
       "dev": true,
       "funding": [
         {
@@ -1997,8 +1961,8 @@
       ],
       "license": "MIT",
       "dependencies": {
-        "caniuse-lite": "^1.0.30001718",
-        "electron-to-chromium": "^1.5.160",
+        "caniuse-lite": "^1.0.30001726",
+        "electron-to-chromium": "^1.5.173",
         "node-releases": "^2.0.19",
         "update-browserslist-db": "^1.1.3"
       },
@@ -2010,27 +1974,14 @@
       }
     },
     "node_modules/buffer": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
-      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
+      "version": "4.9.2",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-4.9.2.tgz",
+      "integrity": "sha512-xq+q3SRMOxGivLhBNaUdC64hDTQwejJ+H0T/NB1XMtTVEwNTrfFF3gAxiyW0Bu/xWEGhjVKgUcMhCrUy2+uCWg==",
       "license": "MIT",
       "dependencies": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.2.1"
+        "base64-js": "^1.0.2",
+        "ieee754": "^1.1.4",
+        "isarray": "^1.0.0"
       }
     },
     "node_modules/buffer-equal-constant-time": {
@@ -2174,9 +2125,9 @@
       }
     },
     "node_modules/caniuse-lite": {
-      "version": "1.0.30001723",
-      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001723.tgz",
-      "integrity": "sha512-1R/elMjtehrFejxwmexeXAtae5UO9iSyFn6G/I806CYC/BLyyBk1EPhrKBkWhy6wM6Xnm47dSJQec+tLJ39WHw==",
+      "version": "1.0.30001727",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
+      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
       "dev": true,
       "funding": [
         {
@@ -2219,6 +2170,29 @@
         "node": ">=4"
       }
     },
+    "node_modules/chai-as-promised": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-8.0.1.tgz",
+      "integrity": "sha512-OIEJtOL8xxJSH8JJWbIoRjybbzR52iFuDHuF8eb+nTPD6tgXLjRqsgnUGqQfFODxYvq5QdirT0pN9dZ0+Gz6rA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "check-error": "^2.0.0"
+      },
+      "peerDependencies": {
+        "chai": ">= 2.1.2 < 6"
+      }
+    },
+    "node_modules/chai-as-promised/node_modules/check-error": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/check-error/-/check-error-2.1.1.tgz",
+      "integrity": "sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 16"
+      }
+    },
     "node_modules/chai-http": {
       "version": "4.4.0",
       "resolved": "https://registry.npmjs.org/chai-http/-/chai-http-4.4.0.tgz",
@@ -2240,31 +2214,33 @@
       }
     },
     "node_modules/chalk": {
-      "version": "2.4.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
-      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "ansi-styles": "^3.2.1",
-        "escape-string-regexp": "^1.0.5",
-        "supports-color": "^5.3.0"
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
       },
       "engines": {
-        "node": ">=4"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
     "node_modules/chalk/node_modules/supports-color": {
-      "version": "5.5.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
-      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "has-flag": "^3.0.0"
+        "has-flag": "^4.0.0"
       },
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/chardet": {
@@ -2376,15 +2352,12 @@
         "node": ">=8"
       }
     },
-    "node_modules/cliui/node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+    "node_modules/cliui/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
+      "license": "MIT"
     },
     "node_modules/cliui/node_modules/string-width": {
       "version": "4.2.3",
@@ -2414,6 +2387,24 @@
         "node": ">=8"
       }
     },
+    "node_modules/cliui/node_modules/wrap-ansi": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
     "node_modules/codependency": {
       "version": "0.1.4",
       "resolved": "https://registry.npmjs.org/codependency/-/codependency-0.1.4.tgz",
@@ -2446,18 +2437,21 @@
       }
     },
     "node_modules/color-convert": {
-      "version": "1.9.3",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
-      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
       "license": "MIT",
       "dependencies": {
-        "color-name": "1.1.3"
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
       }
     },
     "node_modules/color-name": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
-      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
       "license": "MIT"
     },
     "node_modules/color-string": {
@@ -2470,24 +2464,6 @@
         "simple-swizzle": "^0.2.2"
       }
     },
-    "node_modules/color/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/color/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "license": "MIT"
-    },
     "node_modules/colorspace": {
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
@@ -2508,6 +2484,21 @@
         "color-string": "^1.6.0"
       }
     },
+    "node_modules/colorspace/node_modules/color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "1.1.3"
+      }
+    },
+    "node_modules/colorspace/node_modules/color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
+      "license": "MIT"
+    },
     "node_modules/combined-stream": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
@@ -2656,55 +2647,6 @@
         "node": ">= 8"
       }
     },
-    "node_modules/cross-spawn/node_modules/path-key": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
-      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/cross-spawn/node_modules/shebang-command": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
-      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "shebang-regex": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/cross-spawn/node_modules/shebang-regex": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
-      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/cross-spawn/node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
     "node_modules/dashdash": {
       "version": "1.14.1",
       "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
@@ -2836,16 +2778,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/default-require-extensions/node_modules/strip-bom": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
-      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/define-data-property": {
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
@@ -2896,6 +2828,39 @@
         "uniq": "^1.0.1"
       }
     },
+    "node_modules/deglob/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/deglob/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/deglob/node_modules/ignore": {
       "version": "3.3.10",
       "resolved": "https://registry.npmjs.org/ignore/-/ignore-3.3.10.tgz",
@@ -2903,6 +2868,19 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/deglob/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/delayed-stream": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
@@ -3035,16 +3013,16 @@
       "license": "MIT"
     },
     "node_modules/electron-to-chromium": {
-      "version": "1.5.170",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.170.tgz",
-      "integrity": "sha512-GP+M7aeluQo9uAyiTCxgIj/j+PrWhMlY7LFVj8prlsPljd0Fdg9AprlfUi+OCSFWy9Y5/2D/Jrj9HS8Z4rpKWA==",
+      "version": "1.5.186",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.186.tgz",
+      "integrity": "sha512-lur7L4BFklgepaJxj4DqPk7vKbTEl0pajNlg2QjE5shefmlmBLm2HvQ7PMf1R/GvlevT/581cop33/quQcfX3A==",
       "dev": true,
       "license": "ISC"
     },
     "node_modules/emoji-regex": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
-      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "version": "9.2.2",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
+      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
       "dev": true,
       "license": "MIT"
     },
@@ -3149,27 +3127,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/es-abstract/node_modules/object.assign": {
-      "version": "4.1.7",
-      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
-      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "call-bind": "^1.0.8",
-        "call-bound": "^1.0.3",
-        "define-properties": "^1.2.1",
-        "es-object-atoms": "^1.0.0",
-        "has-symbols": "^1.1.0",
-        "object-keys": "^1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/es-define-property": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
@@ -3257,13 +3214,16 @@
       "license": "MIT"
     },
     "node_modules/escape-string-regexp": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
-      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=0.8.0"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
     "node_modules/eslint": {
@@ -3375,9 +3335,9 @@
       "license": "MIT"
     },
     "node_modules/eslint-module-utils": {
-      "version": "2.12.0",
-      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.0.tgz",
-      "integrity": "sha512-wALZ0HFoytlyh/1+4wuZ9FJCD/leWHQzzrxJ8+rebyReSLk7LApMyd3WJaLVoN+D5+WIdJyDK1c6JnE65V4Zyg==",
+      "version": "2.12.1",
+      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.1.tgz",
+      "integrity": "sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -3451,6 +3411,17 @@
         "eslint": "2.x - 5.x"
       }
     },
+    "node_modules/eslint-plugin-import/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
     "node_modules/eslint-plugin-import/node_modules/doctrine": {
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-1.5.0.tgz",
@@ -3464,12 +3435,18 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/eslint-plugin-import/node_modules/isarray": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
-      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
+    "node_modules/eslint-plugin-import/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
       "dev": true,
-      "license": "MIT"
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
     },
     "node_modules/eslint-plugin-node": {
       "version": "7.0.1",
@@ -3492,6 +3469,30 @@
         "eslint": ">=4.19.1"
       }
     },
+    "node_modules/eslint-plugin-node/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/eslint-plugin-node/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/eslint-plugin-promise": {
       "version": "4.0.1",
       "resolved": "https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-4.0.1.tgz",
@@ -3583,6 +3584,82 @@
         "node": ">=4"
       }
     },
+    "node_modules/eslint/node_modules/ansi-regex": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.1.tgz",
+      "integrity": "sha512-+O9Jct8wf++lXxxFc4hc8LsjaSq0HFzzL7cVsw8pRDIPdjKD2mT4ytDZlLuSBZ4cLKZFXIrMGO7DbQCtMJJMKw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/eslint/node_modules/ansi-styles": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/eslint/node_modules/argparse": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
+      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "sprintf-js": "~1.0.2"
+      }
+    },
+    "node_modules/eslint/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/eslint/node_modules/chalk": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^3.2.1",
+        "escape-string-regexp": "^1.0.5",
+        "supports-color": "^5.3.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/eslint/node_modules/color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "1.1.3"
+      }
+    },
+    "node_modules/eslint/node_modules/color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/eslint/node_modules/cross-spawn": {
       "version": "6.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.6.tgz",
@@ -3610,6 +3687,75 @@
         "ms": "^2.1.1"
       }
     },
+    "node_modules/eslint/node_modules/escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.0"
+      }
+    },
+    "node_modules/eslint/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/eslint/node_modules/has-flag": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/eslint/node_modules/js-yaml": {
+      "version": "3.14.1",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
+      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^1.0.7",
+        "esprima": "^4.0.0"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/eslint/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/eslint/node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
@@ -3617,6 +3763,88 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/eslint/node_modules/path-key": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
+      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/eslint/node_modules/shebang-command": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
+      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/eslint/node_modules/shebang-regex": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
+      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/eslint/node_modules/strip-ansi": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
+      "integrity": "sha512-4XaJ2zQdCzROZDivEVIDPkcQn8LMFSa8kj8Gxb/Lnwzv9A8VctNZ+lfivC/sV3ivW8ElJTERXZoPBRrZKkNKow==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/eslint/node_modules/strip-json-comments": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
+      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/eslint/node_modules/supports-color": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/eslint/node_modules/which": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
+      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "which": "bin/which"
+      }
+    },
     "node_modules/espree": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/espree/-/espree-4.1.0.tgz",
@@ -3731,12 +3959,12 @@
       }
     },
     "node_modules/events": {
-      "version": "3.3.0",
-      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
-      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/events/-/events-1.1.1.tgz",
+      "integrity": "sha512-kEcvvCBByWXGnZy6JUlgAp2gBIUjfCAV6P6TgT1/aaQKcmuAEC4OZTV1I4EWQLz2gxZw76atuVyvHhTxvi0Flw==",
       "license": "MIT",
       "engines": {
-        "node": ">=0.8.x"
+        "node": ">=0.4.x"
       }
     },
     "node_modules/express": {
@@ -3786,9 +4014,9 @@
       }
     },
     "node_modules/express-fileupload": {
-      "version": "1.5.1",
-      "resolved": "https://registry.npmjs.org/express-fileupload/-/express-fileupload-1.5.1.tgz",
-      "integrity": "sha512-LsYG1ALXEB7vlmjuSw8ABeOctMp8a31aUC5ZF55zuz7O2jLFnmJYrCv10py357ky48aEoBQ/9bVXgFynjvaPmA==",
+      "version": "1.5.2",
+      "resolved": "https://registry.npmjs.org/express-fileupload/-/express-fileupload-1.5.2.tgz",
+      "integrity": "sha512-wxUJn2vTHvj/kZCVmc5/bJO15C7aSMyHeuXYY3geKpeKibaAoQGcEv5+sM6nHS2T7VF+QHS4hTWPiY2mKofEdg==",
       "license": "MIT",
       "dependencies": {
         "busboy": "^1.6.0"
@@ -3874,11 +4102,21 @@
       "integrity": "sha512-Oa2M9atig69ZkfwiApY8F2Yy+tzMbazyvqv21R0NsSC8floSOC09BbT1ITWAdoMGQvJ/aZnR1KMwdx9tvHnTNA==",
       "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "escape-string-regexp": "^1.0.5"
-      },
+      "dependencies": {
+        "escape-string-regexp": "^1.0.5"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/figures/node_modules/escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+      "dev": true,
+      "license": "MIT",
       "engines": {
-        "node": ">=4"
+        "node": ">=0.8.0"
       }
     },
     "node_modules/file-entry-cache": {
@@ -3978,16 +4216,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/find-up/node_modules/path-exists": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
-      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/flat": {
       "version": "5.0.2",
       "resolved": "https://registry.npmjs.org/flat/-/flat-5.0.2.tgz",
@@ -4014,6 +4242,52 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/flat-cache/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/flat-cache/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/flat-cache/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/flat-cache/node_modules/rimraf": {
       "version": "2.6.3",
       "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
@@ -4086,19 +4360,6 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/foreground-child/node_modules/signal-exit": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
-      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/forever-agent": {
       "version": "0.6.1",
       "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
@@ -4109,9 +4370,9 @@
       }
     },
     "node_modules/form-data": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
-      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
+      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
       "license": "MIT",
       "dependencies": {
         "asynckit": "^0.4.0",
@@ -4357,22 +4618,21 @@
       }
     },
     "node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "version": "10.4.5",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
+      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^3.1.2",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.1.2",
+        "package-json-from-dist": "^1.0.0",
+        "path-scurry": "^1.11.1"
       },
-      "engines": {
-        "node": "*"
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
       },
       "funding": {
         "url": "https://github.com/sponsors/isaacs"
@@ -4494,13 +4754,13 @@
       }
     },
     "node_modules/has-flag": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
-      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/has-property-descriptors": {
@@ -4598,11 +4858,14 @@
       }
     },
     "node_modules/hoek": {
-      "version": "6.1.3",
-      "resolved": "https://registry.npmjs.org/hoek/-/hoek-6.1.3.tgz",
-      "integrity": "sha512-YXXAAhmF9zpQbC7LEcREFtXfGq5K1fmd+4PHkBq8NUqmzW3G+Dq10bI/i0KucLRwss3YYFQ0fSfoxBZYiGUqtQ==",
-      "deprecated": "This module has moved and is now available at @hapi/hoek. Please update your dependencies as this version is no longer maintained an may contain bugs and security issues.",
-      "license": "BSD-3-Clause"
+      "version": "5.0.4",
+      "resolved": "https://registry.npmjs.org/hoek/-/hoek-5.0.4.tgz",
+      "integrity": "sha512-Alr4ZQgoMlnere5FZJsIyfIjORBqZll5POhDsF4q64dPuJR6rNxXdDxtHSQq8OXRurhmx+PWYEE8bXRROY8h0w==",
+      "deprecated": "This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=8.9.0"
+      }
     },
     "node_modules/hosted-git-info": {
       "version": "2.8.9",
@@ -4741,23 +5004,9 @@
       }
     },
     "node_modules/ieee754": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
-      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
+      "version": "1.1.13",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.1.13.tgz",
+      "integrity": "sha512-4vf7I2LYV/HaWerSo3XmlMkp5eZ83i+/CDluXi/IGTs/O1sejBNhTtnxzmRZfvOUqj7lZjqHkeTvpgSFDlWZTg==",
       "license": "BSD-3-Clause"
     },
     "node_modules/ignore": {
@@ -4833,6 +5082,131 @@
         "node": ">=6.0.0"
       }
     },
+    "node_modules/inquirer/node_modules/ansi-regex": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.1.tgz",
+      "integrity": "sha512-+O9Jct8wf++lXxxFc4hc8LsjaSq0HFzzL7cVsw8pRDIPdjKD2mT4ytDZlLuSBZ4cLKZFXIrMGO7DbQCtMJJMKw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/inquirer/node_modules/ansi-styles": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/inquirer/node_modules/chalk": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^3.2.1",
+        "escape-string-regexp": "^1.0.5",
+        "supports-color": "^5.3.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/inquirer/node_modules/color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "1.1.3"
+      }
+    },
+    "node_modules/inquirer/node_modules/color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/inquirer/node_modules/escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.0"
+      }
+    },
+    "node_modules/inquirer/node_modules/has-flag": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/inquirer/node_modules/is-fullwidth-code-point": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
+      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/inquirer/node_modules/string-width": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+      "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-fullwidth-code-point": "^2.0.0",
+        "strip-ansi": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/inquirer/node_modules/strip-ansi": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
+      "integrity": "sha512-4XaJ2zQdCzROZDivEVIDPkcQn8LMFSa8kj8Gxb/Lnwzv9A8VctNZ+lfivC/sV3ivW8ElJTERXZoPBRrZKkNKow==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/inquirer/node_modules/supports-color": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/internal-slot": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
@@ -5040,13 +5414,13 @@
       }
     },
     "node_modules/is-fullwidth-code-point": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
-      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/is-generator-function": {
@@ -5325,10 +5699,9 @@
       }
     },
     "node_modules/isarray": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
-      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
-      "dev": true,
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
       "license": "MIT"
     },
     "node_modules/isemail": {
@@ -5452,16 +5825,6 @@
         "node": ">=10"
       }
     },
-    "node_modules/istanbul-lib-report/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/istanbul-lib-report/node_modules/make-dir": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
@@ -5593,28 +5956,16 @@
       }
     },
     "node_modules/joi": {
-      "version": "14.0.0",
-      "resolved": "https://registry.npmjs.org/joi/-/joi-14.0.0.tgz",
-      "integrity": "sha512-jEu+bPFcsgdPr85hVyjb5D5grxLEZniT6AB1vjewrRDbuYxe2r5quyxs3E32dF8fCXcaJnlRSy4jehSpDuNMNg==",
-      "deprecated": "This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).",
+      "version": "17.13.3",
+      "resolved": "https://registry.npmjs.org/joi/-/joi-17.13.3.tgz",
+      "integrity": "sha512-otDA4ldcIx+ZXsKHWmp0YizCweVRZG96J10b0FevjfuncLO1oX59THoAmHkNubYJ+9gWsYsp5k8v4ib6oDv1fA==",
       "license": "BSD-3-Clause",
       "dependencies": {
-        "hoek": "5.x.x",
-        "isemail": "3.x.x",
-        "topo": "3.x.x"
-      },
-      "engines": {
-        "node": ">=8.9.0"
-      }
-    },
-    "node_modules/joi/node_modules/hoek": {
-      "version": "5.0.4",
-      "resolved": "https://registry.npmjs.org/hoek/-/hoek-5.0.4.tgz",
-      "integrity": "sha512-Alr4ZQgoMlnere5FZJsIyfIjORBqZll5POhDsF4q64dPuJR6rNxXdDxtHSQq8OXRurhmx+PWYEE8bXRROY8h0w==",
-      "deprecated": "This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).",
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=8.9.0"
+        "@hapi/hoek": "^9.3.0",
+        "@hapi/topo": "^5.1.0",
+        "@sideway/address": "^4.1.5",
+        "@sideway/formula": "^3.0.1",
+        "@sideway/pinpoint": "^2.0.0"
       }
     },
     "node_modules/js-tokens": {
@@ -5625,14 +5976,13 @@
       "license": "MIT"
     },
     "node_modules/js-yaml": {
-      "version": "3.13.1",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.13.1.tgz",
-      "integrity": "sha512-YfbcO7jXDdyj0DGxYVSlSeQNHbD7XPWvrVWeVUujrQEoZzWJIRrCPoyk6kL6IAjAG2IolMK4T0hNUe0HOUs5Jw==",
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "argparse": "^1.0.7",
-        "esprima": "^4.0.0"
+        "argparse": "^2.0.1"
       },
       "bin": {
         "js-yaml": "bin/js-yaml.js"
@@ -5877,14 +6227,14 @@
         "node": ">=4"
       }
     },
-    "node_modules/load-json-file/node_modules/pify": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
-      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
+    "node_modules/load-json-file/node_modules/strip-bom": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
+      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=4"
       }
     },
     "node_modules/locate-path": {
@@ -5989,82 +6339,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/log-symbols/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/log-symbols/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/log-symbols/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/log-symbols/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/log-symbols/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/log-symbols/node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/logform": {
       "version": "2.7.0",
       "resolved": "https://registry.npmjs.org/logform/-/logform-2.7.0.tgz",
@@ -6261,16 +6535,19 @@
       }
     },
     "node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "devOptional": true,
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/minimist": {
@@ -6294,23 +6571,22 @@
       }
     },
     "node_modules/mkdirp": {
-      "version": "0.5.4",
-      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.4.tgz",
-      "integrity": "sha512-iG9AK/dJLtJ0XNgTuDbSyNS3zECqDlAhnQW4CsNxBG3LQJBbHmRX1egw39DmtOdCAqY+dKXV+sgPgilNWUKMVw==",
-      "deprecated": "Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x. (Note that the API surface has changed to use Promises in 1.x.)",
+      "version": "0.5.6",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
+      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
       "devOptional": true,
       "license": "MIT",
       "dependencies": {
-        "minimist": "^1.2.5"
+        "minimist": "^1.2.6"
       },
       "bin": {
         "mkdirp": "bin/cmd.js"
       }
     },
     "node_modules/mocha": {
-      "version": "11.7.0",
-      "resolved": "https://registry.npmjs.org/mocha/-/mocha-11.7.0.tgz",
-      "integrity": "sha512-bXfLy/mI8n4QICg+pWj1G8VduX5vC0SHRwFpiR5/Fxc8S2G906pSfkyMmHVsdJNQJQNh3LE67koad9GzEvkV6g==",
+      "version": "11.7.1",
+      "resolved": "https://registry.npmjs.org/mocha/-/mocha-11.7.1.tgz",
+      "integrity": "sha512-5EK+Cty6KheMS/YLPPMJC64g5V61gIR25KsRItHw6x4hEKT6Njp1n9LOlH4gpevuwMVS66SXaBBpg+RWZkza4A==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -6353,23 +6629,6 @@
         "mocha": ">=1.0.0"
       }
     },
-    "node_modules/mocha/node_modules/argparse": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
-      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
-      "dev": true,
-      "license": "Python-2.0"
-    },
-    "node_modules/mocha/node_modules/brace-expansion": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
-      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "balanced-match": "^1.0.0"
-      }
-    },
     "node_modules/mocha/node_modules/debug": {
       "version": "4.4.1",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
@@ -6388,69 +6647,6 @@
         }
       }
     },
-    "node_modules/mocha/node_modules/escape-string-regexp": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
-      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/mocha/node_modules/glob": {
-      "version": "10.4.5",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
-      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "foreground-child": "^3.1.0",
-        "jackspeak": "^3.1.2",
-        "minimatch": "^9.0.4",
-        "minipass": "^7.1.2",
-        "package-json-from-dist": "^1.0.0",
-        "path-scurry": "^1.11.1"
-      },
-      "bin": {
-        "glob": "dist/esm/bin.mjs"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/mocha/node_modules/js-yaml": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
-      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "argparse": "^2.0.1"
-      },
-      "bin": {
-        "js-yaml": "bin/js-yaml.js"
-      }
-    },
-    "node_modules/mocha/node_modules/minimatch": {
-      "version": "9.0.5",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
-      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "brace-expansion": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/mocha/node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
@@ -6458,19 +6654,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/mocha/node_modules/strip-json-comments": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
-      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/moment": {
       "version": "2.30.1",
       "resolved": "https://registry.npmjs.org/moment/-/moment-2.30.1.tgz",
@@ -6508,6 +6691,17 @@
         "node": ">=0.8.0"
       }
     },
+    "node_modules/mv/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
     "node_modules/mv/node_modules/glob": {
       "version": "6.0.4",
       "resolved": "https://registry.npmjs.org/glob/-/glob-6.0.4.tgz",
@@ -6526,6 +6720,19 @@
         "node": "*"
       }
     },
+    "node_modules/mv/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "license": "ISC",
+      "optional": true,
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/mv/node_modules/rimraf": {
       "version": "2.4.5",
       "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.4.5.tgz",
@@ -6541,9 +6748,9 @@
       }
     },
     "node_modules/nan": {
-      "version": "2.22.2",
-      "resolved": "https://registry.npmjs.org/nan/-/nan-2.22.2.tgz",
-      "integrity": "sha512-DANghxFkS1plDdRsX0X9pm0Z6SJNN6gBdtXfanwoZ8hooC5gosGFSBGRYHUVPz1asKA/kMRqDRdHrluZ61SpBQ==",
+      "version": "2.23.0",
+      "resolved": "https://registry.npmjs.org/nan/-/nan-2.23.0.tgz",
+      "integrity": "sha512-1UxuyYGdoQHcGg87Lkqm3FzefucTa0NAiOcuRsDmysep3c1LVCRK2krrUDafMWtjSG04htvAmvg96+SDknOmgQ==",
       "license": "MIT",
       "optional": true
     },
@@ -6699,20 +6906,15 @@
         "node": ">=8"
       }
     },
-    "node_modules/nyc/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+    "node_modules/nyc/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
       }
     },
     "node_modules/nyc/node_modules/cliui": {
@@ -6727,23 +6929,10 @@
         "wrap-ansi": "^6.2.0"
       }
     },
-    "node_modules/nyc/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/nyc/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+    "node_modules/nyc/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
       "dev": true,
       "license": "MIT"
     },
@@ -6761,14 +6950,26 @@
         "node": ">=8"
       }
     },
-    "node_modules/nyc/node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+    "node_modules/nyc/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
       "dev": true,
-      "license": "MIT",
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
       "engines": {
-        "node": ">=8"
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/nyc/node_modules/locate-path": {
@@ -6784,6 +6985,19 @@
         "node": ">=8"
       }
     },
+    "node_modules/nyc/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/nyc/node_modules/p-limit": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
@@ -6813,15 +7027,12 @@
         "node": ">=8"
       }
     },
-    "node_modules/nyc/node_modules/path-exists": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
-      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+    "node_modules/nyc/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
+      "license": "ISC"
     },
     "node_modules/nyc/node_modules/string-width": {
       "version": "4.2.3",
@@ -6951,19 +7162,24 @@
       }
     },
     "node_modules/object.assign": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.0.tgz",
-      "integrity": "sha512-exHJeq6kBKj58mqGyTQ9DFvrZC/eR6OwxzoM9YRoGBqrXYonaFyGiFMuc9VZrXf7DarreEwMpurG3dd+CNyW5w==",
+      "version": "4.1.7",
+      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
+      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "define-properties": "^1.1.2",
-        "function-bind": "^1.1.1",
-        "has-symbols": "^1.0.0",
-        "object-keys": "^1.0.11"
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0",
+        "has-symbols": "^1.1.0",
+        "object-keys": "^1.1.1"
       },
       "engines": {
         "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/on-finished": {
@@ -7157,13 +7373,13 @@
       }
     },
     "node_modules/path-exists": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
-      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/path-is-absolute": {
@@ -7184,13 +7400,13 @@
       "license": "(WTFPL OR MIT)"
     },
     "node_modules/path-key": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
-      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/path-parse": {
@@ -7243,16 +7459,6 @@
         "node": ">=4"
       }
     },
-    "node_modules/path-type/node_modules/pify": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
-      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
     "node_modules/pathval": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/pathval/-/pathval-1.1.1.tgz",
@@ -7289,6 +7495,16 @@
       "dev": true,
       "license": "ISC"
     },
+    "node_modules/pify": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
+      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/pkg-conf": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/pkg-conf/-/pkg-conf-2.1.0.tgz",
@@ -7396,6 +7612,16 @@
         "node": ">=4"
       }
     },
+    "node_modules/pkg-conf/node_modules/path-exists": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
+      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/pkg-conf/node_modules/pify": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
@@ -7406,6 +7632,16 @@
         "node": ">=4"
       }
     },
+    "node_modules/pkg-conf/node_modules/strip-bom": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
+      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/pkg-config": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/pkg-config/-/pkg-config-1.1.1.tgz",
@@ -7490,16 +7726,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/pkg-dir/node_modules/path-exists": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
-      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/pluralize": {
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/pluralize/-/pluralize-7.0.0.tgz",
@@ -7537,14 +7763,14 @@
       }
     },
     "node_modules/prisma": {
-      "version": "6.10.1",
-      "resolved": "https://registry.npmjs.org/prisma/-/prisma-6.10.1.tgz",
-      "integrity": "sha512-khhlC/G49E4+uyA3T3H5PRBut486HD2bDqE2+rvkU0pwk9IAqGFacLFUyIx9Uw+W2eCtf6XGwsp+/strUwMNPw==",
+      "version": "6.12.0",
+      "resolved": "https://registry.npmjs.org/prisma/-/prisma-6.12.0.tgz",
+      "integrity": "sha512-pmV7NEqQej9WjizN6RSNIwf7Y+jeh9mY1JEX2WjGxJi4YZWexClhde1yz/FuvAM+cTwzchcMytu2m4I6wPkIzg==",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/config": "6.10.1",
-        "@prisma/engines": "6.10.1"
+        "@prisma/config": "6.12.0",
+        "@prisma/engines": "6.12.0"
       },
       "bin": {
         "prisma": "build/index.js"
@@ -7863,6 +8089,16 @@
         "node": ">=4"
       }
     },
+    "node_modules/read-pkg-up/node_modules/path-exists": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
+      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/readable-stream": {
       "version": "4.7.0",
       "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
@@ -7879,6 +8115,59 @@
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       }
     },
+    "node_modules/readable-stream/node_modules/buffer": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "node_modules/readable-stream/node_modules/events": {
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
+      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.x"
+      }
+    },
+    "node_modules/readable-stream/node_modules/ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
     "node_modules/readable-web-to-node-stream": {
       "version": "3.0.4",
       "resolved": "https://registry.npmjs.org/readable-web-to-node-stream/-/readable-web-to-node-stream-3.0.4.tgz",
@@ -8126,6 +8415,13 @@
         "node": ">=4"
       }
     },
+    "node_modules/restore-cursor/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/rimraf": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
@@ -8143,6 +8439,52 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
+    "node_modules/rimraf/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/rimraf/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/rimraf/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/run-async": {
       "version": "2.4.1",
       "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz",
@@ -8210,6 +8552,13 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/safe-array-concat/node_modules/isarray": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
+      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/safe-buffer": {
       "version": "5.2.1",
       "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
@@ -8254,6 +8603,13 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/safe-push-apply/node_modules/isarray": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
+      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/safe-regex-test": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
@@ -8427,9 +8783,9 @@
       "license": "ISC"
     },
     "node_modules/sharp": {
-      "version": "0.34.2",
-      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.2.tgz",
-      "integrity": "sha512-lszvBmB9QURERtyKT2bNmsgxXK0ShJrL/fvqlonCo7e6xBF8nT8xU6pW+PMIbLsz0RxQk3rgH9kd8UmvOzlMJg==",
+      "version": "0.34.3",
+      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.3.tgz",
+      "integrity": "sha512-eX2IQ6nFohW4DbvHIOLRB3MHFpYqaqvXd3Tp5e/T/dSH83fxaNJQRvDMhASmkNTsNTVF2/OOopzRCt7xokgPfg==",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
@@ -8444,27 +8800,28 @@
         "url": "https://opencollective.com/libvips"
       },
       "optionalDependencies": {
-        "@img/sharp-darwin-arm64": "0.34.2",
-        "@img/sharp-darwin-x64": "0.34.2",
-        "@img/sharp-libvips-darwin-arm64": "1.1.0",
-        "@img/sharp-libvips-darwin-x64": "1.1.0",
-        "@img/sharp-libvips-linux-arm": "1.1.0",
-        "@img/sharp-libvips-linux-arm64": "1.1.0",
-        "@img/sharp-libvips-linux-ppc64": "1.1.0",
-        "@img/sharp-libvips-linux-s390x": "1.1.0",
-        "@img/sharp-libvips-linux-x64": "1.1.0",
-        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0",
-        "@img/sharp-libvips-linuxmusl-x64": "1.1.0",
-        "@img/sharp-linux-arm": "0.34.2",
-        "@img/sharp-linux-arm64": "0.34.2",
-        "@img/sharp-linux-s390x": "0.34.2",
-        "@img/sharp-linux-x64": "0.34.2",
-        "@img/sharp-linuxmusl-arm64": "0.34.2",
-        "@img/sharp-linuxmusl-x64": "0.34.2",
-        "@img/sharp-wasm32": "0.34.2",
-        "@img/sharp-win32-arm64": "0.34.2",
-        "@img/sharp-win32-ia32": "0.34.2",
-        "@img/sharp-win32-x64": "0.34.2"
+        "@img/sharp-darwin-arm64": "0.34.3",
+        "@img/sharp-darwin-x64": "0.34.3",
+        "@img/sharp-libvips-darwin-arm64": "1.2.0",
+        "@img/sharp-libvips-darwin-x64": "1.2.0",
+        "@img/sharp-libvips-linux-arm": "1.2.0",
+        "@img/sharp-libvips-linux-arm64": "1.2.0",
+        "@img/sharp-libvips-linux-ppc64": "1.2.0",
+        "@img/sharp-libvips-linux-s390x": "1.2.0",
+        "@img/sharp-libvips-linux-x64": "1.2.0",
+        "@img/sharp-libvips-linuxmusl-arm64": "1.2.0",
+        "@img/sharp-libvips-linuxmusl-x64": "1.2.0",
+        "@img/sharp-linux-arm": "0.34.3",
+        "@img/sharp-linux-arm64": "0.34.3",
+        "@img/sharp-linux-ppc64": "0.34.3",
+        "@img/sharp-linux-s390x": "0.34.3",
+        "@img/sharp-linux-x64": "0.34.3",
+        "@img/sharp-linuxmusl-arm64": "0.34.3",
+        "@img/sharp-linuxmusl-x64": "0.34.3",
+        "@img/sharp-wasm32": "0.34.3",
+        "@img/sharp-win32-arm64": "0.34.3",
+        "@img/sharp-win32-ia32": "0.34.3",
+        "@img/sharp-win32-x64": "0.34.3"
       }
     },
     "node_modules/sharp/node_modules/semver": {
@@ -8480,26 +8837,26 @@
       }
     },
     "node_modules/shebang-command": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
-      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "shebang-regex": "^1.0.0"
+        "shebang-regex": "^3.0.0"
       },
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=8"
       }
     },
     "node_modules/shebang-regex": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
-      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=8"
       }
     },
     "node_modules/side-channel": {
@@ -8575,11 +8932,17 @@
       }
     },
     "node_modules/signal-exit": {
-      "version": "3.0.7",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
       "dev": true,
-      "license": "ISC"
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
     },
     "node_modules/simple-swizzle": {
       "version": "0.2.2",
@@ -8609,16 +8972,6 @@
         "url": "https://opencollective.com/sinon"
       }
     },
-    "node_modules/sinon/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/sinon/node_modules/supports-color": {
       "version": "7.2.0",
       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
@@ -8645,6 +8998,16 @@
         "node": ">=4"
       }
     },
+    "node_modules/slice-ansi/node_modules/is-fullwidth-code-point": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
+      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/source-map": {
       "version": "0.6.1",
       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
@@ -8687,21 +9050,12 @@
         "node": ">=8.0.0"
       }
     },
-    "node_modules/spawn-wrap/node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+    "node_modules/spawn-wrap/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
       "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
+      "license": "ISC"
     },
     "node_modules/spdx-correct": {
       "version": "3.2.0",
@@ -8858,17 +9212,21 @@
       }
     },
     "node_modules/string-width": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
-      "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
+      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "is-fullwidth-code-point": "^2.0.0",
-        "strip-ansi": "^4.0.0"
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
       },
       "engines": {
-        "node": ">=4"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
     "node_modules/string-width-cjs": {
@@ -8897,15 +9255,12 @@
         "node": ">=8"
       }
     },
-    "node_modules/string-width-cjs/node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+    "node_modules/string-width-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
+      "license": "MIT"
     },
     "node_modules/string-width-cjs/node_modules/strip-ansi": {
       "version": "6.0.1",
@@ -8980,16 +9335,19 @@
       }
     },
     "node_modules/strip-ansi": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
-      "integrity": "sha512-4XaJ2zQdCzROZDivEVIDPkcQn8LMFSa8kj8Gxb/Lnwzv9A8VctNZ+lfivC/sV3ivW8ElJTERXZoPBRrZKkNKow==",
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "ansi-regex": "^3.0.0"
+        "ansi-regex": "^6.0.1"
       },
       "engines": {
-        "node": ">=4"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
       }
     },
     "node_modules/strip-ansi-cjs": {
@@ -9017,23 +9375,26 @@
       }
     },
     "node_modules/strip-bom": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
-      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
+      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/strip-json-comments": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
-      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
     "node_modules/strtok3": {
@@ -9057,7 +9418,7 @@
       "version": "8.1.2",
       "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.1.2.tgz",
       "integrity": "sha512-6WTxW1EB6yCxV5VFOIPQruWGHqc3yI7hEmZK6h+pyk69Lk/Ut7rLUY6W/ONF2MjBuGjvmMiIpsrVJ2vjrHlslA==",
-      "deprecated": "Please upgrade to v9.0.0+ as we have fixed a public vulnerability with formidable dependency. Note that v9.0.0+ requires Node.js v14.18.0+. See https://github.com/ladjs/superagent/pull/1800 for insight. This project is supported and maintained by the team at Forward Email @ https://forwardemail.net",
+      "deprecated": "Please upgrade to superagent v10.2.2+, see release notes at https://github.com/forwardemail/superagent/releases/tag/v10.2.2 - maintenance is supported by Forward Email @ https://forwardemail.net",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -9143,16 +9504,6 @@
         "url": "https://github.com/chalk/supports-color?sponsor=1"
       }
     },
-    "node_modules/supports-color/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/supports-preserve-symlinks-flag": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
@@ -9181,17 +9532,142 @@
       "resolved": "https://registry.npmjs.org/table/-/table-4.0.3.tgz",
       "integrity": "sha512-S7rnFITmBH1EnyKcvxBh1LjYeQMmnZtCXSEbHcH6S0NoKit24ZuFO/T1vDcLdYsLQkM188PVVhQmzKIuThNkKg==",
       "dev": true,
-      "license": "BSD-3-Clause",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "ajv": "^6.0.1",
+        "ajv-keywords": "^3.0.0",
+        "chalk": "^2.1.0",
+        "lodash": "^4.17.4",
+        "slice-ansi": "1.0.0",
+        "string-width": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=4.0.0"
+      }
+    },
+    "node_modules/table/node_modules/ansi-regex": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.1.tgz",
+      "integrity": "sha512-+O9Jct8wf++lXxxFc4hc8LsjaSq0HFzzL7cVsw8pRDIPdjKD2mT4ytDZlLuSBZ4cLKZFXIrMGO7DbQCtMJJMKw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/table/node_modules/ansi-styles": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/table/node_modules/chalk": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^3.2.1",
+        "escape-string-regexp": "^1.0.5",
+        "supports-color": "^5.3.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/table/node_modules/color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "1.1.3"
+      }
+    },
+    "node_modules/table/node_modules/color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/table/node_modules/escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.0"
+      }
+    },
+    "node_modules/table/node_modules/has-flag": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/table/node_modules/is-fullwidth-code-point": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
+      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/table/node_modules/string-width": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+      "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-fullwidth-code-point": "^2.0.0",
+        "strip-ansi": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/table/node_modules/strip-ansi": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
+      "integrity": "sha512-4XaJ2zQdCzROZDivEVIDPkcQn8LMFSa8kj8Gxb/Lnwzv9A8VctNZ+lfivC/sV3ivW8ElJTERXZoPBRrZKkNKow==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/table/node_modules/supports-color": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "dev": true,
+      "license": "MIT",
       "dependencies": {
-        "ajv": "^6.0.1",
-        "ajv-keywords": "^3.0.0",
-        "chalk": "^2.1.0",
-        "lodash": "^4.17.4",
-        "slice-ansi": "1.0.0",
-        "string-width": "^2.1.1"
+        "has-flag": "^3.0.0"
       },
       "engines": {
-        "node": ">=4.0.0"
+        "node": ">=4"
       }
     },
     "node_modules/tc-core-library-js": {
@@ -9258,6 +9734,52 @@
         "node": ">=8"
       }
     },
+    "node_modules/test-exclude/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/test-exclude/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/test-exclude/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/text-hex": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
@@ -9317,6 +9839,26 @@
         "url": "https://github.com/sponsors/Borewit"
       }
     },
+    "node_modules/token-types/node_modules/ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
     "node_modules/topcoder-bus-api-wrapper": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/topcoder-bus-api-wrapper/-/topcoder-bus-api-wrapper-1.0.1.tgz",
@@ -9363,22 +9905,6 @@
         "url": "https://ko-fi.com/tunnckoCore/commissions"
       }
     },
-    "node_modules/topcoder-bus-api-wrapper/node_modules/hoek": {
-      "version": "5.0.4",
-      "resolved": "https://registry.npmjs.org/hoek/-/hoek-5.0.4.tgz",
-      "integrity": "sha512-Alr4ZQgoMlnere5FZJsIyfIjORBqZll5POhDsF4q64dPuJR6rNxXdDxtHSQq8OXRurhmx+PWYEE8bXRROY8h0w==",
-      "deprecated": "This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).",
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=8.9.0"
-      }
-    },
-    "node_modules/topcoder-bus-api-wrapper/node_modules/isarray": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
-      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
-      "license": "MIT"
-    },
     "node_modules/topcoder-bus-api-wrapper/node_modules/joi": {
       "version": "13.7.0",
       "resolved": "https://registry.npmjs.org/joi/-/joi-13.7.0.tgz",
@@ -9440,7 +9966,7 @@
       "version": "3.8.3",
       "resolved": "https://registry.npmjs.org/superagent/-/superagent-3.8.3.tgz",
       "integrity": "sha512-GLQtLMCoEIK4eDv6OGtkOoSMt3D+oq0y3dsxMuYuDvaNUvuT8eFBuLmfR0iYYzHC1e8hpzC6ZsxbuP6DIalMFA==",
-      "deprecated": "Please upgrade to v9.0.0+ as we have fixed a public vulnerability with formidable dependency. Note that v9.0.0+ requires Node.js v14.18.0+. See https://github.com/ladjs/superagent/pull/1800 for insight. This project is supported and maintained by the team at Forward Email @ https://forwardemail.net",
+      "deprecated": "Please upgrade to superagent v10.2.2+, see release notes at https://github.com/forwardemail/superagent/releases/tag/v10.2.2 - maintenance is supported by Forward Email @ https://forwardemail.net",
       "license": "MIT",
       "dependencies": {
         "component-emitter": "^1.2.0",
@@ -9468,6 +9994,13 @@
         "hoek": "6.x.x"
       }
     },
+    "node_modules/topo/node_modules/hoek": {
+      "version": "6.1.3",
+      "resolved": "https://registry.npmjs.org/hoek/-/hoek-6.1.3.tgz",
+      "integrity": "sha512-YXXAAhmF9zpQbC7LEcREFtXfGq5K1fmd+4PHkBq8NUqmzW3G+Dq10bI/i0KucLRwss3YYFQ0fSfoxBZYiGUqtQ==",
+      "deprecated": "This module has moved and is now available at @hapi/hoek. Please update your dependencies as this version is no longer maintained an may contain bugs and security issues.",
+      "license": "BSD-3-Clause"
+    },
     "node_modules/tough-cookie": {
       "version": "2.5.0",
       "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
@@ -9819,16 +10352,19 @@
       }
     },
     "node_modules/which": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
-      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
         "isexe": "^2.0.0"
       },
       "bin": {
-        "which": "bin/which"
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
       }
     },
     "node_modules/which-boxed-primitive": {
@@ -9879,6 +10415,13 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/which-builtin-type/node_modules/isarray": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
+      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/which-collection": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
@@ -10001,25 +10544,25 @@
       }
     },
     "node_modules/workerpool": {
-      "version": "9.3.2",
-      "resolved": "https://registry.npmjs.org/workerpool/-/workerpool-9.3.2.tgz",
-      "integrity": "sha512-Xz4Nm9c+LiBHhDR5bDLnNzmj6+5F+cyEAWPMkbs2awq/dYazR/efelZzUAjB/y3kNHL+uzkHvxVVpaOfGCPV7A==",
+      "version": "9.3.3",
+      "resolved": "https://registry.npmjs.org/workerpool/-/workerpool-9.3.3.tgz",
+      "integrity": "sha512-slxCaKbYjEdFT/o2rH9xS1hf4uRDch1w7Uo+apxhZ+sf/1d9e0ZVkn42kPNGP2dgjIx6YFvSevj0zHvbWe2jdw==",
       "dev": true,
       "license": "Apache-2.0"
     },
     "node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
-      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
+      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
       },
       "engines": {
-        "node": ">=10"
+        "node": ">=12"
       },
       "funding": {
         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
@@ -10054,52 +10597,13 @@
         "node": ">=8"
       }
     },
-    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/wrap-ansi-cjs/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/wrap-ansi-cjs/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/wrap-ansi-cjs/node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/wrap-ansi-cjs/node_modules/string-width": {
       "version": "4.2.3",
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
@@ -10128,90 +10632,19 @@
         "node": ">=8"
       }
     },
-    "node_modules/wrap-ansi/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/wrap-ansi/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
       "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
       "engines": {
-        "node": ">=8"
+        "node": ">=12"
       },
       "funding": {
         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
-    "node_modules/wrap-ansi/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/wrap-ansi/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/wrap-ansi/node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/wrap-ansi/node_modules/string-width": {
-      "version": "4.2.3",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
-      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "emoji-regex": "^8.0.0",
-        "is-fullwidth-code-point": "^3.0.0",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/wrap-ansi/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/wrappy": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
@@ -10245,6 +10678,13 @@
         "typedarray-to-buffer": "^3.1.5"
       }
     },
+    "node_modules/write-file-atomic/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/xml2js": {
       "version": "0.6.2",
       "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.6.2.tgz",
@@ -10375,15 +10815,12 @@
         "node": ">=8"
       }
     },
-    "node_modules/yargs/node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+    "node_modules/yargs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
+      "license": "MIT"
     },
     "node_modules/yargs/node_modules/string-width": {
       "version": "4.2.3",
diff --git a/package.json b/package.json
index b2f7522..f048a00 100644
--- a/package.json
+++ b/package.json
@@ -20,6 +20,7 @@
   "devDependencies": {
     "aws-sdk-mock": "^6.2.1",
     "chai": "^4.2.0",
+    "chai-as-promised": "^8.0.1",
     "chai-http": "^4.2.1",
     "mocha": "^11.7.0",
     "mocha-prepare": "^0.1.0",
@@ -41,9 +42,9 @@
     "file-type-checker": "^1.1.2",
     "get-parameter-names": "^0.3.0",
     "http-status-codes": "^1.3.0",
-    "joi": "^14.0.0",
+    "joi": "^17.13.3",
     "jsonwebtoken": "^8.3.0",
-    "lodash": "^4.17.19",
+    "lodash": "^4.17.21",
     "mime-types": "^2.1.35",
     "moment": "^2.27.0",
     "prisma": "^6.10.1",
diff --git a/src/controllers/StatisticsController.js b/src/controllers/StatisticsController.js
index 420baba..8a64942 100644
--- a/src/controllers/StatisticsController.js
+++ b/src/controllers/StatisticsController.js
@@ -3,14 +3,25 @@
  */
 const service = require('../services/StatisticsService')
 
+function sendError(res, err) {
+  const status = err.status || err.httpStatus || 500;
+  const body = { message: err.message };
+  if (err.details) body.details = err.details;
+  res.status(status).json(body);
+}
+
 /**
  * Get distribution statistics
  * @param {Object} req the request
  * @param {Object} res the response
  */
 async function getDistribution (req, res) {
+  try {
   const result = await service.getDistribution(req.query)
   res.send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
 }
 
 /**
@@ -19,8 +30,12 @@ async function getDistribution (req, res) {
  * @param {Object} res the response
  */
 async function getHistoryStats (req, res) {
+  try {
   const result = await service.getHistoryStats(req.authUser, req.params.handle, req.query)
   res.send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
 }
 
 /**
@@ -29,8 +44,12 @@ async function getHistoryStats (req, res) {
  * @param {Object} res the response
  */
 async function getMemberStats (req, res) {
+  try {
   const result = await service.getMemberStats(req.authUser, req.params.handle, req.query, true)
   res.send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
 }
 
 /**
@@ -39,8 +58,12 @@ async function getMemberStats (req, res) {
  * @param {Object} res the response
  */
 async function getMemberSkills (req, res) {
+  try {
   const result = await service.getMemberSkills(req.params.handle)
   res.send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
 }
 
 /**
@@ -49,8 +72,12 @@ async function getMemberSkills (req, res) {
  * @param {Object} res the response
  */
 async function createMemberSkills (req, res) {
+  try {
   const result = await service.createMemberSkills(req.authUser, req.params.handle, req.body)
   res.send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
 }
 
 /**
@@ -59,14 +86,78 @@ async function createMemberSkills (req, res) {
  * @param {Object} res the response
  */
 async function partiallyUpdateMemberSkills (req, res) {
+  try {
   const result = await service.partiallyUpdateMemberSkills(req.authUser, req.params.handle, req.body)
   res.send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
+}
+
+/**
+ * Create member history statistics
+ * @param {Object} req the request
+ * @param {Object} res the response
+ */
+async function createHistoryStats (req, res) {
+  try {
+    const result = await service.createHistoryStats(req.authUser, req.params.handle, req.body)
+    res.status(201).send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
+}
+
+/**
+ * Update member history statistics
+ * @param {Object} req the request
+ * @param {Object} res the response
+ */
+async function updateHistoryStats (req, res) {
+  try {
+    const result = await service.updateHistoryStats(req.authUser, req.params.handle, req.body)
+    res.status(200).send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
+}
+
+/**
+ * Create member statistics
+ * @param {Object} req the request
+ * @param {Object} res the response
+ */
+async function createMemberStats (req, res) {
+  try {
+    const result = await service.createMemberStats(req.authUser, req.params.handle, req.body)
+    res.status(201).send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
+}
+
+/**
+ * Update member statistics
+ * @param {Object} req the request
+ * @param {Object} res the response
+ */
+async function updateMemberStats (req, res) {
+  try {
+    const result = await service.updateMemberStats(req.authUser, req.params.handle, req.body)
+    res.status(200).send(result)
+  } catch (err) {
+    sendError(res, err)
+  }
 }
 
 module.exports = {
   getDistribution,
   getHistoryStats,
+  createHistoryStats,
+  updateHistoryStats,
   getMemberStats,
+  createMemberStats,
+  updateMemberStats,
   getMemberSkills,
   createMemberSkills,
   partiallyUpdateMemberSkills
diff --git a/src/routes.js b/src/routes.js
index 88c6c1b..f034c3b 100644
--- a/src/routes.js
+++ b/src/routes.js
@@ -125,6 +125,18 @@ module.exports = {
       auth: 'jwt',
       allowNoToken: true,
       scopes: [MEMBERS.READ, MEMBERS.ALL]
+    },
+    post: {
+      controller: 'StatisticsController',
+      method: 'createHistoryStats',
+      auth: 'jwt',
+      scopes: [MEMBERS.CREATE, MEMBERS.ALL]
+    },
+    patch: {
+      controller: 'StatisticsController',
+      method: 'updateHistoryStats',
+      auth: 'jwt',
+      scopes: [MEMBERS.UPDATE, MEMBERS.ALL]
     }
   },
   '/members/:handle/stats': {
@@ -134,6 +146,18 @@ module.exports = {
       auth: 'jwt',
       allowNoToken: true,
       scopes: [MEMBERS.READ, MEMBERS.ALL]
+    },
+    post: {
+      controller: 'StatisticsController',
+      method: 'createMemberStats',
+      auth: 'jwt',
+      scopes: [MEMBERS.CREATE, MEMBERS.ALL]
+    },
+    patch: {
+      controller: 'StatisticsController',
+      method: 'updateMemberStats',
+      auth: 'jwt',
+      scopes: [MEMBERS.UPDATE, MEMBERS.ALL]
     }
   },
   '/members/:handle/skills': {
diff --git a/src/scripts/seed-testdata-api.js b/src/scripts/seed-testdata-api.js
new file mode 100644
index 0000000..9508bf5
--- /dev/null
+++ b/src/scripts/seed-testdata-api.js
@@ -0,0 +1,127 @@
+/**
+ * Script to seed the database with test data from test_data_api.json for member stats endpoints.
+ * This script is idempotent: it clears existing data for each userId before inserting new data.
+ */
+const fs = require('fs')
+const path = require('path')
+const _ = require('lodash')
+const prisma = require('../common/prisma').getClient()
+const createdBy = 'testdata-seed'
+
+function readDate(ms) {
+  return ms ? new Date(ms) : null
+}
+
+async function clearMemberData(userId) {
+  // Delete stats, stats history, skills, traits, addresses, etc. for the member
+  await prisma.memberStats.deleteMany({ where: { userId } })
+  await prisma.memberHistoryStats.deleteMany({ where: { userId } })
+  await prisma.memberSkill.deleteMany({ where: { userId } })
+  await prisma.memberTraits.deleteMany({ where: { userId } })
+  await prisma.memberAddress.deleteMany({ where: { userId } })
+  await prisma.memberMaxRating.deleteMany({ where: { userId } })
+  await prisma.member.deleteMany({ where: { userId } })
+}
+
+async function seedMember(member) {
+  await clearMemberData(member.userId)
+  // Create member and related maxRating, addresses
+  const memberData = {
+    userId: member.userId,
+    handle: member.handle,
+    handleLower: member.handleLower,
+    email: `${member.handle}@topcoder.com`,
+    verified: member.verified || false,
+    firstName: member.firstName,
+    lastName: member.lastName,
+    status: member.status,
+    homeCountryCode: member.homeCountryCode,
+    competitionCountryCode: member.competitionCountryCode,
+    photoURL: member.photoURL,
+    tracks: member.tracks,
+    createdAt: readDate(member.createdAt) || new Date(),
+    updatedAt: readDate(member.updatedAt) || new Date(),
+    createdBy,
+    addresses: { create: (member.addresses || []).map(addr => ({ ...addr, type: addr.type || '', createdBy })) },
+    maxRating: member.maxRating ? { create: { 
+      ...member.maxRating,
+      track: member.maxRating.track || '',
+      subTrack: member.maxRating.subTrack || '',
+      createdBy 
+    } } : undefined
+  }
+  const createdMember = await prisma.member.create({ data: memberData, include: { maxRating: true } })
+  // Seed stats
+  if (member.stats && member.stats.length > 0) {
+    for (const stats of member.stats) {
+      const statsData = {
+        userId: member.userId,
+        challenges: stats.challenges,
+        wins: stats.wins,
+        createdBy,
+        memberRatingId: createdMember.maxRating ? createdMember.maxRating.id : undefined,
+        develop: stats.DEVELOP ? {
+          create: {
+            challenges: stats.DEVELOP.challenges,
+            wins: stats.DEVELOP.wins,
+            createdBy,
+            items: stats.DEVELOP.subTracks && stats.DEVELOP.subTracks.length > 0 ? {
+              create: stats.DEVELOP.subTracks.map(st => ({
+                name: st.name,
+                subTrackId: st.id,
+                challenges: st.challenges,
+                wins: st.wins,
+                createdBy
+              }))
+            } : undefined
+          }
+        } : undefined,
+        design: stats.DESIGN ? {
+          create: {
+            challenges: stats.DESIGN.challenges,
+            wins: stats.DESIGN.wins,
+            createdBy,
+            items: stats.DESIGN.subTracks && stats.DESIGN.subTracks.length > 0 ? {
+              create: stats.DESIGN.subTracks.map(st => ({
+                name: st.name,
+                subTrackId: st.id,
+                challenges: st.challenges,
+                wins: st.wins,
+                createdBy
+              }))
+            } : undefined
+          }
+        } : undefined,
+        dataScience: stats.DATA_SCIENCE ? {
+          create: {
+            challenges: stats.DATA_SCIENCE.challenges,
+            wins: stats.DATA_SCIENCE.wins,
+            createdBy
+          }
+        } : undefined
+      }
+      await prisma.memberStats.create({ data: statsData })
+    }
+  }
+  // TODO: Seed stats history if present in member object
+}
+
+async function main() {
+  const filePath = path.join(__dirname, '../../test_data_api.json')
+  const raw = fs.readFileSync(filePath, 'utf8')
+  const members = JSON.parse(raw)
+  let success = 0, failed = 0
+  for (const member of members) {
+    try {
+      await seedMember(member)
+      console.log(`Seeded member ${member.handle}`)
+      success++
+    } catch (err) {
+      console.error(`Failed to seed member ${member.handle}:`, err)
+      failed++
+    }
+  }
+  console.log(`Seeding complete. Success: ${success}, Failed: ${failed}`)
+}
+
+main().catch(e => { console.error(e); process.exit(1) }) 
\ No newline at end of file
diff --git a/src/scripts/validate-seeded-data.js b/src/scripts/validate-seeded-data.js
new file mode 100644
index 0000000..58dbd6f
--- /dev/null
+++ b/src/scripts/validate-seeded-data.js
@@ -0,0 +1,88 @@
+/**
+ * Script to validate that seeded data in the local API matches test_data_api.json.
+ * For each member, fetches data from the API and compares it to the expected data.
+ */
+const fs = require('fs')
+const path = require('path')
+const axios = require('axios')
+const _ = require('lodash')
+
+const API_BASE = 'http://localhost:3000/v5'
+
+function normalize(val) {
+  if (Array.isArray(val)) return val.map(normalize)
+  if (val && typeof val === 'object') {
+    const out = {}
+    for (const k of Object.keys(val)) {
+      if (val[k] !== undefined && val[k] !== null) out[k] = normalize(val[k])
+    }
+    return out
+  }
+  return val
+}
+
+async function validateMember(member) {
+  let passed = true
+  // Validate /members/:handle
+  try {
+    const res = await axios.get(`${API_BASE}/members/${encodeURIComponent(member.handle)}`)
+    const apiData = normalize(res.data)
+    const expected = normalize(_.pick(member, ['handle', 'handleLower', 'userId', 'firstName', 'lastName', 'status']))
+    for (const k of Object.keys(expected)) {
+      if (!_.isEqual(apiData[k], expected[k])) {
+        console.log(`[FAIL] /members/${member.handle} field '${k}' mismatch: expected`, expected[k], 'got', apiData[k])
+        passed = false
+      }
+    }
+  } catch (err) {
+    console.log(`[FAIL] /members/${member.handle} error:`, err.response ? err.response.status : err.message)
+    passed = false
+  }
+  // Validate /members/:handle/stats
+  try {
+    const res = await axios.get(`${API_BASE}/members/${encodeURIComponent(member.handle)}/stats`)
+    const apiStats = normalize(res.data)
+    const expectedStats = normalize(member.stats)
+    if (!_.isEqual(apiStats, expectedStats)) {
+      console.log(`[FAIL] /members/${member.handle}/stats mismatch`)
+      passed = false
+    }
+  } catch (err) {
+    console.log(`[FAIL] /members/${member.handle}/stats error:`, err.response ? err.response.status : err.message)
+    passed = false
+  }
+  // Validate /members/:handle/stats/history if present
+  if (member.statsHistory) {
+    try {
+      const res = await axios.get(`${API_BASE}/members/${encodeURIComponent(member.handle)}/stats/history`)
+      const apiHistory = normalize(res.data)
+      const expectedHistory = normalize(member.statsHistory)
+      if (!_.isEqual(apiHistory, expectedHistory)) {
+        console.log(`[FAIL] /members/${member.handle}/stats/history mismatch`)
+        passed = false
+      }
+    } catch (err) {
+      console.log(`[FAIL] /members/${member.handle}/stats/history error:`, err.response ? err.response.status : err.message)
+      passed = false
+    }
+  }
+  if (passed) {
+    console.log(`[PASS] ${member.handle}`)
+  }
+  return passed
+}
+
+async function main() {
+  const filePath = path.join(__dirname, '../../test_data_api.json')
+  const raw = fs.readFileSync(filePath, 'utf8')
+  const members = JSON.parse(raw)
+  let passCount = 0, failCount = 0
+  for (const member of members) {
+    const passed = await validateMember(member)
+    if (passed) passCount++
+    else failCount++
+  }
+  console.log(`Validation complete. Passed: ${passCount}, Failed: ${failCount}`)
+}
+
+main().catch(e => { console.error(e); process.exit(1) }) 
\ No newline at end of file
diff --git a/src/services/MemberService.js b/src/services/MemberService.js
index 2bcd4e8..bd57bf1 100644
--- a/src/services/MemberService.js
+++ b/src/services/MemberService.js
@@ -138,13 +138,13 @@ async function getMember (currentUser, handle, query) {
   return cleanMember(currentUser, member, selectFields)
 }
 
-getMember.schema = {
+getMember.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   query: Joi.object().keys({
     fields: Joi.string()
+  }).unknown(false)
   })
-}
 
 /**
  * Get member profile completeness data.
@@ -262,14 +262,14 @@ async function getProfileCompleteness (currentUser, handle, query) {
   return response
 }
 
-getProfileCompleteness.schema = {
+getProfileCompleteness.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   query: Joi.object().keys({
     fields: Joi.string(),
     toast: Joi.string()
   })
-}
+})
 
 /**
  * Compute the current user's userId
@@ -288,12 +288,12 @@ async function getMemberUserIdSignature (currentUser, query) {
   return { uid_signature: userIdHash }
 }
 
-getMemberUserIdSignature.schema = {
+getMemberUserIdSignature.schema = Joi.object().keys({
   currentUser: Joi.any(),
   query: Joi.object().keys({
     type: Joi.string().valid('userflow').required()
   }).required()
-}
+})
 
 /**
  * Update member profile data, only passed fields will be updated.
@@ -393,7 +393,7 @@ async function updateMember (currentUser, handle, query, data) {
   return cleanMember(currentUser, result, selectFields)
 }
 
-updateMember.schema = {
+updateMember.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   query: Joi.object().keys({
@@ -422,7 +422,7 @@ updateMember.schema = {
     availableForGigs: Joi.bool().allow(null),
     namesAndHandleAppearance: Joi.string().allow(null)
   }).required()
-}
+})
 
 /**
  * Verify email.
@@ -466,23 +466,33 @@ async function verifyEmail (currentUser, handle, query) {
   }
   member.updatedAt = new Date()
   member.updatedBy = currentUser.userId || currentUser.sub
+
+  // Only update allowed fields (exclude id and relations)
+  const updateData = {}
+  for (const key of Object.keys(member)) {
+    // Exclude id, maxRating, and any other relations
+    if (key !== 'id' && key !== 'maxRating') {
+      updateData[key] = member[key]
+    }
+  }
+
   // update member in db
   const result = await prisma.member.update({
     where: { userId: member.userId },
-    data: member
+    data: updateData
   })
   prismaHelper.convertMember(result)
   await helper.postBusEvent(constants.TOPICS.MemberUpdated, result)
   return { emailChangeCompleted, verifiedEmail }
 }
 
-verifyEmail.schema = {
+verifyEmail.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   query: Joi.object().keys({
     token: Joi.string().required()
   }).required()
-}
+})
 
 /**
  * Upload photo.
@@ -556,13 +566,13 @@ async function uploadPhoto (currentUser, handle, files) {
   return { photoURL }
 }
 
-uploadPhoto.schema = {
+uploadPhoto.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   files: Joi.object().keys({
     photo: Joi.object().required()
   }).required()
-}
+})
 
 module.exports = {
   getMember,
diff --git a/src/services/MemberTraitService.js b/src/services/MemberTraitService.js
index 358cc81..824987d 100644
--- a/src/services/MemberTraitService.js
+++ b/src/services/MemberTraitService.js
@@ -230,14 +230,14 @@ async function getTraits (currentUser, handle, query) {
   return result
 }
 
-getTraits.schema = {
+getTraits.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   query: Joi.object().keys({
     traitIds: Joi.string(),
     fields: Joi.string()
   })
-}
+});
 
 /**
  * Build prisma data for creating/updating traits
@@ -412,7 +412,7 @@ const traitSchemas = {
 const traitSchemaSwitch = _.map(_.keys(traitSchemas,
   k => ({ is: k, then: traitSchemas[k] })))
 
-createTraits.schema = {
+createTraits.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   data: Joi.array().items(Joi.object().keys({
@@ -423,13 +423,12 @@ createTraits.schema = {
       data: Joi.alternatives().try(
         Joi.when(Joi.ref('traitId'), {
           is: Joi.string().valid(...TRAIT_IDS),
-          switch: traitSchemaSwitch,
           otherwise: Joi.forbidden()
         })
       )
     })
   }).required()).min(1).required()
-}
+});
 
 /**
  * Update member traits.
@@ -483,7 +482,7 @@ async function updateTraits (currentUser, handle, data) {
   return result
 }
 
-updateTraits.schema = createTraits.schema
+updateTraits.schema = createTraits.schema;
 
 /**
  * Remove member traits. If traitIds query parameter is not provided, then all member traits are removed.
@@ -541,13 +540,13 @@ async function removeTraits (currentUser, handle, query) {
   }
 }
 
-removeTraits.schema = {
+removeTraits.schema = Joi.object().keys({
   currentUser: Joi.any(),
   handle: Joi.string().required(),
   query: Joi.object().keys({
     traitIds: Joi.string() // if not provided, then all member traits are removed
-  })
-}
+  }).unknown(false)
+});
 /**
 * This function is used to calculate a deduction to the skill score used in the talent search
 * We have a calculation based on traits and if they are defined or not, including work history
diff --git a/src/services/StatisticsService.js b/src/services/StatisticsService.js
index 4bd8a8c..0e82159 100644
--- a/src/services/StatisticsService.js
+++ b/src/services/StatisticsService.js
@@ -385,13 +385,573 @@ partiallyUpdateMemberSkills.schema = {
   }).required()
 }
 
+// --- Joi Schema Constants ---
+const developHistoryItemSchema = Joi.object({
+  id: Joi.number().integer().optional(),
+  challengeId: Joi.number().integer().messages({
+    'any.required': 'challengeId is required',
+    'number.base': 'challengeId must be a number'
+  }).required(),
+  challengeName: Joi.string().messages({
+    'any.required': 'challengeName is required',
+    'string.base': 'challengeName must be a string'
+  }).required(),
+  ratingDate: Joi.date().messages({
+    'any.required': 'ratingDate is required',
+    'date.base': 'ratingDate must be a valid date'
+  }).required(),
+  newRating: Joi.number().integer().messages({
+    'any.required': 'newRating is required',
+    'number.base': 'newRating must be a number'
+  }).required(),
+  subTrack: Joi.string().messages({
+    'any.required': 'subTrack is required',
+    'string.base': 'subTrack must be a string'
+  }).required(),
+  subTrackId: Joi.number().integer().messages({
+    'any.required': 'subTrackId is required',
+    'number.base': 'subTrackId must be a number'
+  }).required()
+}).unknown(false)
+
+const dataScienceHistoryItemSchema = Joi.object({
+  id: Joi.number().integer().optional(),
+  challengeId: Joi.number().integer().messages({
+    'any.required': 'challengeId is required',
+    'number.base': 'challengeId must be a number'
+  }).required(),
+  challengeName: Joi.string().messages({
+    'any.required': 'challengeName is required',
+    'string.base': 'challengeName must be a string'
+  }).required(),
+  date: Joi.date().messages({
+    'any.required': 'date is required',
+    'date.base': 'date must be a valid date'
+  }).required(),
+  rating: Joi.number().integer().messages({
+    'any.required': 'rating is required',
+    'number.base': 'rating must be a number'
+  }).required(),
+  placement: Joi.number().integer().messages({
+    'any.required': 'placement is required',
+    'number.base': 'placement must be a number'
+  }).required(),
+  percentile: Joi.number().messages({
+    'any.required': 'percentile is required',
+    'number.base': 'percentile must be a number'
+  }).required(),
+  subTrack: Joi.string().messages({
+    'any.required': 'subTrack is required',
+    'string.base': 'subTrack must be a string'
+  }).required(),
+  subTrackId: Joi.number().integer().messages({
+    'any.required': 'subTrackId is required',
+    'number.base': 'subTrackId must be a number'
+  }).required()
+}).unknown(false)
+
+const statsItemSchema = Joi.object({
+  id: Joi.number().integer().optional(),
+  name: Joi.string().messages({
+    'any.required': 'name is required',
+    'string.base': 'name must be a string'
+  }).required(),
+  subTrackId: Joi.number().integer().messages({
+    'any.required': 'subTrackId is required',
+    'number.base': 'subTrackId must be a number'
+  }).required(),
+  challenges: Joi.number().integer().messages({
+    'number.base': 'challenges must be a number'
+  }).optional(),
+  wins: Joi.number().integer().messages({
+    'number.base': 'wins must be a number'
+  }).optional(),
+  mostRecentSubmission: Joi.date().messages({
+    'date.base': 'mostRecentSubmission must be a valid date'
+  }).optional(),
+  mostRecentEventDate: Joi.date().messages({
+    'date.base': 'mostRecentEventDate must be a valid date'
+  }).optional()
+}).unknown(false)
+
+// --- createHistoryStats & updateHistoryStats ---
+const historyStatsSchema = Joi.object({
+  groupId: Joi.number().integer().optional(),
+  isPrivate: Joi.boolean().optional(),
+  develop: Joi.array().items(developHistoryItemSchema).optional(),
+  dataScience: Joi.array().items(dataScienceHistoryItemSchema).optional()
+}).unknown(false).messages({
+  'object.unknown': 'Unknown field in stats history payload'
+})
+
+// --- createMemberStats & updateMemberStats ---
+const statsObjectSchema = Joi.object({
+  id: Joi.number().integer().optional(),
+  challenges: Joi.number().integer().messages({ 'number.base': 'challenges must be a number' }).optional(),
+  wins: Joi.number().integer().messages({ 'number.base': 'wins must be a number' }).optional(),
+  mostRecentSubmission: Joi.date().messages({ 'date.base': 'mostRecentSubmission must be a valid date' }).optional(),
+  mostRecentEventDate: Joi.date().messages({ 'date.base': 'mostRecentEventDate must be a valid date' }).optional(),
+  items: Joi.array().items(statsItemSchema).optional()
+}).unknown(false)
+
+const memberStatsSchema = Joi.object({
+  groupId: Joi.number().integer().optional(),
+  isPrivate: Joi.boolean().optional(),
+  challenges: Joi.number().integer().messages({ 'number.base': 'challenges must be a number' }).optional(),
+  wins: Joi.number().integer().messages({ 'number.base': 'wins must be a number' }).optional(),
+  maxRatingId: Joi.number().integer().messages({ 'number.base': 'maxRatingId must be a number' }).optional(),
+  develop: statsObjectSchema.optional(),
+  design: statsObjectSchema.optional(),
+  dataScience: statsObjectSchema.optional(),
+  copilot: statsObjectSchema.optional()
+}).unknown(false).messages({
+  'object.unknown': 'Unknown field in member stats payload'
+})
+
+async function createHistoryStats(currentUser, handle, data) {
+  // Validate member
+  const member = await helper.getMemberByHandle(handle)
+  if (!helper.canManageMember(currentUser, member)) {
+    throw new errors.ForbiddenError('You are not allowed to create the member history statistics.')
+  }
+
+  // Joi validation schema for payload
+  const { error: validationError1 } = historyStatsSchema.validate(data)
+  if (validationError1) {
+    throw new errors.BadRequestError(validationError1.details.map(e => e.message).join(', '))
+  }
+
+  // Prepare data for Prisma
+  const createdBy = currentUser.handle || currentUser.sub
+  const historyStatsData = {
+    userId: member.userId,
+    createdBy,
+    isPrivate: data.isPrivate || false
+  }
+  if (data.groupId) {
+    historyStatsData.groupId = data.groupId
+    historyStatsData.isPrivate = true
+  }
+  if (data.develop && data.develop.length > 0) {
+    historyStatsData.develop = {
+      create: data.develop.map(item => ({
+        ...item,
+        ratingDate: new Date(item.ratingDate),
+        createdBy
+      }))
+    }
+  }
+  if (data.dataScience && data.dataScience.length > 0) {
+    historyStatsData.dataScience = {
+      create: data.dataScience.map(item => ({
+        ...item,
+        date: new Date(item.date),
+        createdBy
+      }))
+    }
+  }
+
+  // Create record
+  const created = await prisma.memberHistoryStats.create({
+    data: historyStatsData,
+    include: { develop: true, dataScience: true }
+  })
+  return prismaHelper.buildStatsHistoryResponse(member, created)
+}
+
+async function updateHistoryStats(currentUser, handle, data) {
+  // Validate member
+  const member = await helper.getMemberByHandle(handle)
+  if (!helper.canManageMember(currentUser, member)) {
+    throw new errors.ForbiddenError('You are not allowed to update the member history statistics.')
+  }
+
+  // Joi validation schema for payload
+  const { error: validationError2 } = historyStatsSchema.validate(data)
+  if (validationError2) {
+    throw new errors.BadRequestError(validationError2.details.map(e => e.message).join(', '))
+  }
+
+  // Find existing stats record
+  const stats = await prisma.memberHistoryStats.findFirst({
+    where: {
+      userId: member.userId,
+      groupId: data.groupId || null
+    },
+    include: { develop: true, dataScience: true }
+  })
+  if (!stats) {
+    throw new errors.NotFoundError('Member history statistics not found')
+  }
+
+  const updatedBy = currentUser.handle || currentUser.sub
+
+  await prisma.$transaction(async (tx) => {
+    // DEVELOP upsert/delete
+    const dbDevelopIds = new Set((stats.develop || []).map(d => d.id))
+    const payloadDevelopIds = new Set((data.develop || []).filter(d => d.id).map(d => d.id))
+    // Delete develop items not in payload
+    for (const dbId of dbDevelopIds) {
+      if (!payloadDevelopIds.has(dbId)) {
+        await tx.memberDevelopHistoryStats.delete({ where: { id: dbId } })
+      }
+    }
+    // Upsert develop items
+    for (const item of data.develop || []) {
+      if (item.id) {
+        await tx.memberDevelopHistoryStats.update({
+          where: { id: item.id },
+          data: {
+            challengeId: item.challengeId,
+            challengeName: item.challengeName,
+            ratingDate: new Date(item.ratingDate),
+            newRating: item.newRating,
+            subTrack: item.subTrack,
+            subTrackId: item.subTrackId,
+            updatedBy
+          }
+        })
+      } else {
+        await tx.memberDevelopHistoryStats.create({
+          data: {
+            historyStatsId: stats.id,
+            challengeId: item.challengeId,
+            challengeName: item.challengeName,
+            ratingDate: new Date(item.ratingDate),
+            newRating: item.newRating,
+            subTrack: item.subTrack,
+            subTrackId: item.subTrackId,
+            createdBy: updatedBy
+          }
+        })
+      }
+    }
+    // DATA_SCIENCE upsert/delete
+    const dbDataScienceIds = new Set((stats.dataScience || []).map(d => d.id))
+    const payloadDataScienceIds = new Set((data.dataScience || []).filter(d => d.id).map(d => d.id))
+    // Delete dataScience items not in payload
+    for (const dbId of dbDataScienceIds) {
+      if (!payloadDataScienceIds.has(dbId)) {
+        await tx.memberDataScienceHistoryStats.delete({ where: { id: dbId } })
+      }
+    }
+    // Upsert dataScience items
+    for (const item of data.dataScience || []) {
+      if (item.id) {
+        await tx.memberDataScienceHistoryStats.update({
+          where: { id: item.id },
+          data: {
+            challengeId: item.challengeId,
+            challengeName: item.challengeName,
+            date: new Date(item.date),
+            rating: item.rating,
+            placement: item.placement,
+            percentile: item.percentile,
+            subTrack: item.subTrack,
+            subTrackId: item.subTrackId,
+            updatedBy
+          }
+        })
+      } else {
+        await tx.memberDataScienceHistoryStats.create({
+          data: {
+            historyStatsId: stats.id,
+            challengeId: item.challengeId,
+            challengeName: item.challengeName,
+            date: new Date(item.date),
+            rating: item.rating,
+            placement: item.placement,
+            percentile: item.percentile,
+            subTrack: item.subTrack,
+            subTrackId: item.subTrackId,
+            createdBy: updatedBy
+          }
+        })
+      }
+    }
+    // Update main stats record
+    await tx.memberHistoryStats.update({
+      where: { id: stats.id },
+      data: { updatedBy }
+    })
+  })
+
+  // Return updated record
+  const updated = await prisma.memberHistoryStats.findFirst({
+    where: { userId: member.userId, groupId: data.groupId || null },
+    include: { develop: true, dataScience: true }
+  })
+  return prismaHelper.buildStatsHistoryResponse(member, updated)
+}
+
+async function createMemberStats(currentUser, handle, data) {
+  // Validate member
+  const member = await helper.getMemberByHandle(handle)
+  if (!helper.canManageMember(currentUser, member)) {
+    throw new errors.ForbiddenError('You are not allowed to create the member statistics.')
+  }
+
+  // Joi validation schema for payload
+  const { error: validationError3 } = memberStatsSchema.validate(data)
+  if (validationError3) {
+    throw new errors.BadRequestError(validationError3.details.map(e => e.message).join(', '))
+  }
+
+  // Prepare data for Prisma
+  const createdBy = currentUser.handle || currentUser.sub
+  const memberStatsData = {
+    userId: member.userId,
+    createdBy,
+    isPrivate: data.isPrivate || false
+  }
+  if (data.groupId) {
+    memberStatsData.groupId = data.groupId
+    memberStatsData.isPrivate = true
+  }
+  if (data.challenges !== undefined) memberStatsData.challenges = data.challenges
+  if (data.wins !== undefined) memberStatsData.wins = data.wins
+  if (data.maxRatingId) memberStatsData.memberRatingId = data.maxRatingId
+
+  // Nested develop
+  if (data.develop) {
+    memberStatsData.develop = {
+      create: {
+        challenges: data.develop.challenges,
+        wins: data.develop.wins,
+        mostRecentSubmission: data.develop.mostRecentSubmission ? new Date(data.develop.mostRecentSubmission) : undefined,
+        mostRecentEventDate: data.develop.mostRecentEventDate ? new Date(data.develop.mostRecentEventDate) : undefined,
+        createdBy,
+        items: data.develop.items && data.develop.items.length > 0 ? {
+          create: data.develop.items.map(item => ({
+            ...item,
+            mostRecentSubmission: item.mostRecentSubmission ? new Date(item.mostRecentSubmission) : undefined,
+            mostRecentEventDate: item.mostRecentEventDate ? new Date(item.mostRecentEventDate) : undefined,
+            createdBy
+          }))
+        } : undefined
+      }
+    }
+  }
+  // Nested design
+  if (data.design) {
+    memberStatsData.design = {
+      create: {
+        challenges: data.design.challenges,
+        wins: data.design.wins,
+        mostRecentSubmission: data.design.mostRecentSubmission ? new Date(data.design.mostRecentSubmission) : undefined,
+        mostRecentEventDate: data.design.mostRecentEventDate ? new Date(data.design.mostRecentEventDate) : undefined,
+        createdBy,
+        items: data.design.items && data.design.items.length > 0 ? {
+          create: data.design.items.map(item => ({
+            ...item,
+            mostRecentSubmission: item.mostRecentSubmission ? new Date(item.mostRecentSubmission) : undefined,
+            mostRecentEventDate: item.mostRecentEventDate ? new Date(item.mostRecentEventDate) : undefined,
+            createdBy
+          }))
+        } : undefined
+      }
+    }
+  }
+  // Nested dataScience
+  if (data.dataScience) {
+    memberStatsData.dataScience = {
+      create: {
+        challenges: data.dataScience.challenges,
+        wins: data.dataScience.wins,
+        mostRecentSubmission: data.dataScience.mostRecentSubmission ? new Date(data.dataScience.mostRecentSubmission) : undefined,
+        mostRecentEventDate: data.dataScience.mostRecentEventDate ? new Date(data.dataScience.mostRecentEventDate) : undefined,
+        mostRecentEventName: data.dataScience.mostRecentEventName,
+        createdBy
+        // srm and marathon handled below
+      }
+    }
+    // TODO: handle srm and marathon nested creation if needed
+  }
+  // Nested copilot
+  if (data.copilot) {
+    memberStatsData.copilot = { create: { ...data.copilot, createdBy } }
+  }
+
+  // Create record
+  const created = await prisma.memberStats.create({
+    data: memberStatsData,
+    include: prismaHelper.statsIncludeParams
+  })
+  return prismaHelper.buildStatsResponse(member, created)
+}
+
+async function updateMemberStats(currentUser, handle, data) {
+  // Validate member
+  const member = await helper.getMemberByHandle(handle)
+  if (!helper.canManageMember(currentUser, member)) {
+    throw new errors.ForbiddenError('You are not allowed to update the member statistics.')
+  }
+
+  // Joi validation schema for payload
+  const { error: validationError4 } = memberStatsSchema.validate(data)
+  if (validationError4) {
+    throw new errors.BadRequestError(validationError4.details.map(e => e.message).join(', '))
+  }
+
+  // Find existing stats record
+  const stats = await prisma.memberStats.findFirst({
+    where: {
+      userId: member.userId,
+      groupId: data.groupId || null
+    },
+    include: prismaHelper.statsIncludeParams
+  })
+  if (!stats) {
+    throw new errors.NotFoundError('Member statistics not found')
+  }
+
+  const updatedBy = currentUser.handle || currentUser.sub
+
+  await prisma.$transaction(async (tx) => {
+    // Update main stats fields
+    await tx.memberStats.update({
+      where: { id: stats.id },
+      data: {
+        challenges: data.challenges !== undefined ? data.challenges : stats.challenges,
+        wins: data.wins !== undefined ? data.wins : stats.wins,
+        memberRatingId: data.maxRatingId !== undefined ? data.maxRatingId : stats.memberRatingId,
+        updatedBy
+      }
+    })
+    // DEVELOP upsert/delete
+    if (data.develop) {
+      let develop = stats.develop
+      if (develop) {
+        // Update develop fields
+        await tx.memberDevelopStats.update({
+          where: { id: develop.id },
+          data: {
+            challenges: data.develop.challenges !== undefined ? data.develop.challenges : develop.challenges,
+            wins: data.develop.wins !== undefined ? data.develop.wins : develop.wins,
+            mostRecentSubmission: data.develop.mostRecentSubmission ? new Date(data.develop.mostRecentSubmission) : develop.mostRecentSubmission,
+            mostRecentEventDate: data.develop.mostRecentEventDate ? new Date(data.develop.mostRecentEventDate) : develop.mostRecentEventDate,
+            updatedBy
+          }
+        })
+        // Items upsert/delete
+        const dbItemIds = new Set((develop.items || []).map(d => d.id))
+        const payloadItemIds = new Set((data.develop.items || []).filter(d => d.id).map(d => d.id))
+        // Delete items not in payload
+        for (const dbId of dbItemIds) {
+          if (!payloadItemIds.has(dbId)) {
+            await tx.memberDevelopStatsItem.delete({ where: { id: dbId } })
+          }
+        }
+        // Upsert items
+        for (const item of data.develop.items || []) {
+          if (item.id) {
+            await tx.memberDevelopStatsItem.update({
+              where: { id: item.id },
+              data: {
+                name: item.name,
+                subTrackId: item.subTrackId,
+                challenges: item.challenges,
+                wins: item.wins,
+                mostRecentSubmission: item.mostRecentSubmission ? new Date(item.mostRecentSubmission) : undefined,
+                mostRecentEventDate: item.mostRecentEventDate ? new Date(item.mostRecentEventDate) : undefined,
+                updatedBy
+              }
+            })
+          } else {
+            await tx.memberDevelopStatsItem.create({
+              data: {
+                developStatsId: develop.id,
+                name: item.name,
+                subTrackId: item.subTrackId,
+                challenges: item.challenges,
+                wins: item.wins,
+                mostRecentSubmission: item.mostRecentSubmission ? new Date(item.mostRecentSubmission) : undefined,
+                mostRecentEventDate: item.mostRecentEventDate ? new Date(item.mostRecentEventDate) : undefined,
+                createdBy: updatedBy
+              }
+            })
+          }
+        }
+      }
+    }
+    // DESIGN upsert/delete
+    if (data.design) {
+      let design = stats.design
+      if (design) {
+        // Update design fields
+        await tx.memberDesignStats.update({
+          where: { id: design.id },
+          data: {
+            challenges: data.design.challenges !== undefined ? data.design.challenges : design.challenges,
+            wins: data.design.wins !== undefined ? data.design.wins : design.wins,
+            mostRecentSubmission: data.design.mostRecentSubmission ? new Date(data.design.mostRecentSubmission) : design.mostRecentSubmission,
+            mostRecentEventDate: data.design.mostRecentEventDate ? new Date(data.design.mostRecentEventDate) : design.mostRecentEventDate,
+            updatedBy
+          }
+        })
+        // Items upsert/delete
+        const dbItemIds = new Set((design.items || []).map(d => d.id))
+        const payloadItemIds = new Set((data.design.items || []).filter(d => d.id).map(d => d.id))
+        // Delete items not in payload
+        for (const dbId of dbItemIds) {
+          if (!payloadItemIds.has(dbId)) {
+            await tx.memberDesignStatsItem.delete({ where: { id: dbId } })
+          }
+        }
+        // Upsert items
+        for (const item of data.design.items || []) {
+          if (item.id) {
+            await tx.memberDesignStatsItem.update({
+              where: { id: item.id },
+              data: {
+                name: item.name,
+                subTrackId: item.subTrackId,
+                challenges: item.challenges,
+                wins: item.wins,
+                mostRecentSubmission: item.mostRecentSubmission ? new Date(item.mostRecentSubmission) : undefined,
+                mostRecentEventDate: item.mostRecentEventDate ? new Date(item.mostRecentEventDate) : undefined,
+                updatedBy
+              }
+            })
+          } else {
+            await tx.memberDesignStatsItem.create({
+              data: {
+                designStatsId: design.id,
+                name: item.name,
+                subTrackId: item.subTrackId,
+                challenges: item.challenges,
+                wins: item.wins,
+                mostRecentSubmission: item.mostRecentSubmission ? new Date(item.mostRecentSubmission) : undefined,
+                mostRecentEventDate: item.mostRecentEventDate ? new Date(item.mostRecentEventDate) : undefined,
+                createdBy: updatedBy
+              }
+            })
+          }
+        }
+      }
+    }
+    // TODO: dataScience and copilot upsert/delete logic (similar pattern)
+  })
+
+  // Return updated record
+  const updated = await prisma.memberStats.findFirst({
+    where: { userId: member.userId, groupId: data.groupId || null },
+    include: prismaHelper.statsIncludeParams
+  })
+  return prismaHelper.buildStatsResponse(member, updated)
+}
+
 module.exports = {
   getDistribution,
   getHistoryStats,
   getMemberStats,
   getMemberSkills,
   createMemberSkills,
-  partiallyUpdateMemberSkills
+  partiallyUpdateMemberSkills,
+  createHistoryStats,
+  updateHistoryStats,
+  createMemberStats,
+  updateMemberStats
 }
 
 logger.buildService(module.exports)
diff --git a/test/integration/StatisticsEndpoints.test.js b/test/integration/StatisticsEndpoints.test.js
new file mode 100644
index 0000000..b679c69
--- /dev/null
+++ b/test/integration/StatisticsEndpoints.test.js
@@ -0,0 +1,335 @@
+const chai = require('chai');
+const chaiAsPromised = require('chai-as-promised');
+chai.use(chaiAsPromised);
+const expect = chai.expect;
+const request = require('supertest');
+const app = require('../../src/app'); // Adjust if your express app is exported elsewhere
+const seedTestData = require('../scripts/seed-testdata-api');
+const prisma = require('../../src/common/prisma').getClient();
+
+// Helper: seed and cleanup
+async function resetDb() {
+  await prisma.$executeRaw`TRUNCATE TABLE "memberHistoryStats" RESTART IDENTITY CASCADE`;
+  await prisma.$executeRaw`TRUNCATE TABLE "memberStats" RESTART IDENTITY CASCADE`;
+  // Add more tables as needed
+  await seedTestData();
+}
+
+describe('Statistics Endpoints Integration', function () {
+  this.timeout(10000);
+
+  before(async () => {
+    await resetDb();
+  });
+
+  after(async () => {
+    // Optionally clean up
+    await resetDb();
+  });
+
+  describe('POST /members/:handle/stats/history', () => {
+    it('should create stats history for a valid member', async () => {
+      const payload = {
+        develop: [
+          {
+            challengeId: 999,
+            challengeName: 'Integration Challenge',
+            ratingDate: '2023-01-01',
+            newRating: 1700,
+            subTrack: 'SRM',
+            subTrackId: 1
+          }
+        ]
+      };
+      const res = await request(app)
+        .post('/members/testuser/stats/history')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken'); // Adjust auth as needed
+      expect(res.status).to.equal(201);
+      expect(res.body).to.have.property('develop');
+      expect(res.body.develop[0]).to.include({ challengeName: 'Integration Challenge' });
+    });
+  });
+
+  describe('PATCH /members/:handle/stats/history', () => {
+    it('should update stats history for a valid member', async () => {
+      // First, create a history record to update
+      const createPayload = {
+        develop: [
+          {
+            challengeId: 1000,
+            challengeName: 'Patch Challenge',
+            ratingDate: '2023-02-01',
+            newRating: 1800,
+            subTrack: 'SRM',
+            subTrackId: 2
+          }
+        ]
+      };
+      await request(app)
+        .post('/members/testuser/stats/history')
+        .send(createPayload)
+        .set('Authorization', 'Bearer testtoken');
+
+      // Now, patch the record
+      const patchPayload = {
+        develop: [
+          {
+            challengeId: 1000,
+            challengeName: 'Patched Challenge',
+            ratingDate: '2023-02-01',
+            newRating: 1850,
+            subTrack: 'SRM',
+            subTrackId: 2
+          }
+        ]
+      };
+      const res = await request(app)
+        .patch('/members/testuser/stats/history')
+        .send(patchPayload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(200);
+      expect(res.body).to.have.property('develop');
+      expect(res.body.develop[0]).to.include({ challengeName: 'Patched Challenge' });
+    });
+  });
+
+  describe('POST /members/:handle/stats', () => {
+    it('should create member stats for a valid member', async () => {
+      const payload = {
+        challenges: 10,
+        wins: 3,
+        develop: {
+          challenges: 5,
+          wins: 2,
+          mostRecentSubmission: '2023-03-01',
+          mostRecentEventDate: '2023-03-02',
+          items: [
+            {
+              name: 'SRM',
+              subTrackId: 1,
+              challenges: 2,
+              wins: 1
+            }
+          ]
+        },
+        design: {
+          challenges: 2,
+          wins: 1,
+          items: []
+        },
+        dataScience: {
+          challenges: 1,
+          wins: 0,
+          items: []
+        },
+        copilot: {
+          challenges: 0,
+          wins: 0,
+          items: []
+        }
+      };
+      const res = await request(app)
+        .post('/members/testuser/stats')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(201);
+      expect(res.body).to.have.property('develop');
+      expect(res.body.develop).to.have.property('items');
+      expect(res.body.develop.items[0]).to.include({ name: 'SRM' });
+    });
+  });
+
+  describe('PATCH /members/:handle/stats', () => {
+    it('should update member stats for a valid member', async () => {
+      // First, create a stats record to update
+      const createPayload = {
+        challenges: 5,
+        wins: 2,
+        develop: {
+          challenges: 3,
+          wins: 1,
+          mostRecentSubmission: '2023-04-01',
+          mostRecentEventDate: '2023-04-02',
+          items: [
+            {
+              name: 'SRM',
+              subTrackId: 1,
+              challenges: 2,
+              wins: 1
+            }
+          ]
+        },
+        design: {
+          challenges: 2,
+          wins: 1,
+          items: []
+        },
+        dataScience: {
+          challenges: 1,
+          wins: 0,
+          items: []
+        },
+        copilot: {
+          challenges: 0,
+          wins: 0,
+          items: []
+        }
+      };
+      await request(app)
+        .post('/members/testuser/stats')
+        .send(createPayload)
+        .set('Authorization', 'Bearer testtoken');
+
+      // Now, patch the record
+      const patchPayload = {
+        develop: {
+          items: [
+            {
+              name: 'SRM Patched',
+              subTrackId: 1,
+              challenges: 3,
+              wins: 2
+            }
+          ]
+        }
+      };
+      const res = await request(app)
+        .patch('/members/testuser/stats')
+        .send(patchPayload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(200);
+      expect(res.body).to.have.property('develop');
+      expect(res.body.develop).to.have.property('items');
+      expect(res.body.develop.items[0]).to.include({ name: 'SRM Patched' });
+    });
+  });
+
+  describe('Error and Edge Cases', () => {
+    it('should return 404 for non-existent member on POST /members/:handle/stats/history', async () => {
+      const payload = {
+        develop: [
+          {
+            challengeId: 999,
+            challengeName: 'Integration Challenge',
+            ratingDate: '2023-01-01',
+            newRating: 1700,
+            subTrack: 'SRM',
+            subTrackId: 1
+          }
+        ]
+      };
+      const res = await request(app)
+        .post('/members/nonexistentuser/stats/history')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(404);
+    });
+
+    it('should return 400 for invalid payload on POST /members/:handle/stats/history', async () => {
+      const payload = { develop: [{}] }; // missing required fields
+      const res = await request(app)
+        .post('/members/testuser/stats/history')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(400);
+    });
+
+    it('should return 403 for missing token on POST /members/:handle/stats/history', async () => {
+      const payload = {
+        develop: [
+          {
+            challengeId: 999,
+            challengeName: 'Integration Challenge',
+            ratingDate: '2023-01-01',
+            newRating: 1700,
+            subTrack: 'SRM',
+            subTrackId: 1
+          }
+        ]
+      };
+      const res = await request(app)
+        .post('/members/testuser/stats/history')
+        .send(payload);
+      expect(res.status).to.equal(403);
+    });
+
+    it('should return 404 for non-existent member on PATCH /members/:handle/stats/history', async () => {
+      const payload = { develop: [] };
+      const res = await request(app)
+        .patch('/members/nonexistentuser/stats/history')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(404);
+    });
+
+    it('should return 400 for invalid payload on PATCH /members/:handle/stats/history', async () => {
+      const payload = { develop: [{}] };
+      const res = await request(app)
+        .patch('/members/testuser/stats/history')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(400);
+    });
+
+    it('should return 403 for missing token on PATCH /members/:handle/stats/history', async () => {
+      const payload = { develop: [] };
+      const res = await request(app)
+        .patch('/members/testuser/stats/history')
+        .send(payload);
+      expect(res.status).to.equal(403);
+    });
+
+    it('should return 404 for non-existent member on POST /members/:handle/stats', async () => {
+      const payload = { challenges: 1, wins: 0, develop: { items: [] }, design: { items: [] }, dataScience: { items: [] }, copilot: { items: [] } };
+      const res = await request(app)
+        .post('/members/nonexistentuser/stats')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(404);
+    });
+
+    it('should return 400 for invalid payload on POST /members/:handle/stats', async () => {
+      const payload = { develop: { items: [{}] } };
+      const res = await request(app)
+        .post('/members/testuser/stats')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(400);
+    });
+
+    it('should return 403 for missing token on POST /members/:handle/stats', async () => {
+      const payload = { challenges: 1, wins: 0, develop: { items: [] }, design: { items: [] }, dataScience: { items: [] }, copilot: { items: [] } };
+      const res = await request(app)
+        .post('/members/testuser/stats')
+        .send(payload);
+      expect(res.status).to.equal(403);
+    });
+
+    it('should return 404 for non-existent member on PATCH /members/:handle/stats', async () => {
+      const payload = { develop: { items: [] } };
+      const res = await request(app)
+        .patch('/members/nonexistentuser/stats')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(404);
+    });
+
+    it('should return 400 for invalid payload on PATCH /members/:handle/stats', async () => {
+      const payload = { develop: { items: [{}] } };
+      const res = await request(app)
+        .patch('/members/testuser/stats')
+        .send(payload)
+        .set('Authorization', 'Bearer testtoken');
+      expect(res.status).to.equal(400);
+    });
+
+    it('should return 403 for missing token on PATCH /members/:handle/stats', async () => {
+      const payload = { develop: { items: [] } };
+      const res = await request(app)
+        .patch('/members/testuser/stats')
+        .send(payload);
+      expect(res.status).to.equal(403);
+    });
+  });
+}); 
\ No newline at end of file
diff --git a/test/unit/MemberService.test.js b/test/unit/MemberService.test.js
index c9531f8..d230dcb 100644
--- a/test/unit/MemberService.test.js
+++ b/test/unit/MemberService.test.js
@@ -5,7 +5,8 @@
 require('../../app-bootstrap')
 const _ = require('lodash')
 const config = require('config')
-const chai = require('chai')
+const chai = require('chai');
+const chaiAsPromised = require('chai-as-promised');
 const fs = require('fs')
 const path = require('path')
 const awsMock = require('aws-sdk-mock')
@@ -123,7 +124,7 @@ describe('member service unit tests', () => {
       try {
         await service.getMember({ isMachine: true }, member1.handle, { invalid: 'email' })
       } catch (e) {
-        should.equal(e.message.indexOf('"invalid" is not allowed') >= 0, true)
+        e.message.should.include('"query.invalid" is not allowed');
         return
       }
       throw new Error('should not reach here')
@@ -171,7 +172,7 @@ describe('member service unit tests', () => {
       try {
         await service.verifyEmail({ isMachine: true }, member1.handle, {})
       } catch (e) {
-        should.equal(e.message.indexOf('"token" is required') >= 0, true)
+        e.message.should.include('"query.token" is required');
         return
       }
       throw new Error('should not reach here')
@@ -181,7 +182,7 @@ describe('member service unit tests', () => {
       try {
         await service.verifyEmail({ isMachine: true }, member1.handle, { token: 'abc', invalid: 'email' })
       } catch (e) {
-        should.equal(e.message.indexOf('"invalid" is not allowed') >= 0, true)
+        e.message.should.include('"query.invalid" is not allowed');
         return
       }
       throw new Error('should not reach here')
@@ -246,7 +247,7 @@ describe('member service unit tests', () => {
           email: 'abc'
         })
       } catch (e) {
-        should.equal(e.message.indexOf('"email" must be a valid email') >= 0, true)
+        e.message.should.include('"data.email" must be a valid email');
         return
       }
       throw new Error('should not reach here')
@@ -258,7 +259,7 @@ describe('member service unit tests', () => {
           other: 'abc'
         })
       } catch (e) {
-        should.equal(e.message.indexOf('"other" is not allowed') >= 0, true)
+        e.message.should.include('"data.other" is not allowed');
         return
       }
       throw new Error('should not reach here')
@@ -306,7 +307,7 @@ describe('member service unit tests', () => {
           }
         })
       } catch (e) {
-        should.equal(e.message.indexOf('"photo" is required') >= 0, true)
+        e.message.should.include('"files.photo" is required');
         return
       }
       throw new Error('should not reach here')
@@ -316,7 +317,7 @@ describe('member service unit tests', () => {
       try {
         await service.uploadPhoto({ handle: 'admin', roles: ['admin'] }, member2.handle, {})
       } catch (e) {
-        should.equal(e.message.indexOf('"photo" is required') >= 0, true)
+        e.message.should.include('"files.photo" is required');
         return
       }
       throw new Error('should not reach here')
@@ -351,7 +352,7 @@ describe('member service unit tests', () => {
           other: 'invalid'
         })
       } catch (e) {
-        should.equal(e.message.indexOf('"other" is not allowed') >= 0, true)
+        e.message.should.include('"files.other" is not allowed');
         return
       }
       throw new Error('should not reach here')
diff --git a/test/unit/MemberTraitService.test.js b/test/unit/MemberTraitService.test.js
index c37c73d..074a38f 100644
--- a/test/unit/MemberTraitService.test.js
+++ b/test/unit/MemberTraitService.test.js
@@ -4,6 +4,7 @@
 
 require('../../app-bootstrap')
 const chai = require('chai')
+const chaiAsPromised = require('chai-as-promised');
 const service = require('../../src/services/MemberTraitService')
 const testHelper = require('../testHelper')
 
@@ -83,7 +84,7 @@ describe('member trait service unit tests', () => {
       try {
         await service.getTraits({}, member1.handle, { invalid: 'email' })
       } catch (e) {
-        should.equal(e.message.indexOf('"invalid" is not allowed') >= 0, true)
+        e.message.should.include('"query.invalid" is not allowed');
         return
       }
       throw new Error('should not reach here')
@@ -146,7 +147,7 @@ describe('member trait service unit tests', () => {
           traits: { data: [{ test: 111 }] }
         }])
       } catch (e) {
-        should.equal(e.message.indexOf('"traitId" must be one of') >= 0, true)
+        e.message.should.include('"data[0].traitId" must be one of');
         return
       }
       throw new Error('should not reach here')
@@ -160,7 +161,7 @@ describe('member trait service unit tests', () => {
           traits: { traitId: 'work', data: [{ test: 111 }] }
         }])
       } catch (e) {
-        should.equal(e.message.indexOf('"categoryName" must be a string') >= 0, true)
+        e.message.should.include('"data[0].categoryName" must be a string');
         return
       }
       throw new Error('should not reach here')
@@ -181,7 +182,7 @@ describe('member trait service unit tests', () => {
           other: 123
         }])
       } catch (e) {
-        should.equal(e.message.indexOf('"other" is not allowed') >= 0, true)
+        e.message.should.include('"data[0].other" is not allowed');
         return
       }
       throw new Error('should not reach here')
@@ -262,7 +263,7 @@ describe('member trait service unit tests', () => {
           traits: { data: [{ test: 111 }] }
         }])
       } catch (e) {
-        should.equal(e.message.indexOf('"categoryName" must be a string') >= 0, true)
+        e.message.should.include('"data[0].categoryName" must be a string');
         return
       }
       throw new Error('should not reach here')
@@ -277,7 +278,7 @@ describe('member trait service unit tests', () => {
           other: 123
         }])
       } catch (e) {
-        should.equal(e.message.indexOf('"other" is not allowed') >= 0, true)
+        e.message.should.include('"data[0].other" is not allowed');
         return
       }
       throw new Error('should not reach here')
@@ -328,7 +329,7 @@ describe('member trait service unit tests', () => {
         await service.removeTraits({ handle: 'admin', roles: ['admin'] }, member1.handle,
           { traitIds: 'work', invalid: 123 })
       } catch (e) {
-        should.equal(e.message.indexOf('"invalid" is not allowed') >= 0, true)
+        e.message.should.include('"query.invalid" is not allowed');
         return
       }
       throw new Error('should not reach here')
diff --git a/test/unit/StatisticsController.test.js b/test/unit/StatisticsController.test.js
new file mode 100644
index 0000000..39e76dc
--- /dev/null
+++ b/test/unit/StatisticsController.test.js
@@ -0,0 +1,104 @@
+const chai = require('chai')
+const chaiAsPromised = require('chai-as-promised');
+const sinon = require('sinon')
+const should = chai.should()
+const StatisticsController = require('../../src/controllers/StatisticsController')
+const StatisticsService = require('../../src/services/StatisticsService')
+
+// Helper to mock req/res
+function mockReqRes(body = {}, params = {}, authUser = {}) {
+  const req = { body, params, authUser }
+  // Add .json method to support res.status().json()
+  const res = {
+    status: sinon.stub().returnsThis(),
+    send: sinon.stub().returnsThis(),
+    json: sinon.stub().returnsThis()
+  }
+  return { req, res }
+}
+
+describe('StatisticsController', () => {
+  afterEach(() => {
+    sinon.restore()
+  })
+
+  describe('createHistoryStats', () => {
+    it('should return 201 for valid request', async () => {
+      const { req, res } = mockReqRes({ foo: 'bar' }, { handle: 'test' }, { sub: 'user' })
+      const fakeResult = { id: 1 }
+      sinon.stub(StatisticsService, 'createHistoryStats').resolves(fakeResult)
+      await StatisticsController.createHistoryStats(req, res)
+      res.status.calledWith(201).should.be.true
+      res.send.calledWith(fakeResult).should.be.true
+    })
+    it('should handle service error', async () => {
+      const { req, res } = mockReqRes({}, { handle: 'test' }, { sub: 'user' })
+      sinon.stub(StatisticsService, 'createHistoryStats').rejects(new Error('fail'))
+      try {
+        await StatisticsController.createHistoryStats(req, res)
+      } catch (e) {
+        e.message.should.equal('fail')
+      }
+    })
+  })
+
+  describe('updateHistoryStats', () => {
+    it('should return 200 for valid request', async () => {
+      const { req, res } = mockReqRes({ foo: 'bar' }, { handle: 'test' }, { sub: 'user' })
+      const fakeResult = { id: 2 }
+      sinon.stub(StatisticsService, 'updateHistoryStats').resolves(fakeResult)
+      await StatisticsController.updateHistoryStats(req, res)
+      res.status.calledWith(200).should.be.true
+      res.send.calledWith(fakeResult).should.be.true
+    })
+    it('should handle service error', async () => {
+      const { req, res } = mockReqRes({}, { handle: 'test' }, { sub: 'user' })
+      sinon.stub(StatisticsService, 'updateHistoryStats').rejects(new Error('fail'))
+      try {
+        await StatisticsController.updateHistoryStats(req, res)
+      } catch (e) {
+        e.message.should.equal('fail')
+      }
+    })
+  })
+
+  describe('createMemberStats', () => {
+    it('should return 201 for valid request', async () => {
+      const { req, res } = mockReqRes({ foo: 'bar' }, { handle: 'test' }, { sub: 'user' })
+      const fakeResult = { id: 3 }
+      sinon.stub(StatisticsService, 'createMemberStats').resolves(fakeResult)
+      await StatisticsController.createMemberStats(req, res)
+      res.status.calledWith(201).should.be.true
+      res.send.calledWith(fakeResult).should.be.true
+    })
+    it('should handle service error', async () => {
+      const { req, res } = mockReqRes({}, { handle: 'test' }, { sub: 'user' })
+      sinon.stub(StatisticsService, 'createMemberStats').rejects(new Error('fail'))
+      try {
+        await StatisticsController.createMemberStats(req, res)
+      } catch (e) {
+        e.message.should.equal('fail')
+      }
+    })
+  })
+
+  describe('updateMemberStats', () => {
+    it('should return 200 for valid request', async () => {
+      const { req, res } = mockReqRes({ foo: 'bar' }, { handle: 'test' }, { sub: 'user' })
+      const fakeResult = { id: 4 }
+      sinon.stub(StatisticsService, 'updateMemberStats').resolves(fakeResult)
+      await StatisticsController.updateMemberStats(req, res)
+      res.status.calledWith(200).should.be.true
+      res.send.calledWith(fakeResult).should.be.true
+    })
+    it('should handle service error', async () => {
+      const { req, res } = mockReqRes({}, { handle: 'test' }, { sub: 'user' })
+      sinon.stub(StatisticsService, 'updateMemberStats').rejects(new Error('fail'))
+      try {
+        await StatisticsController.updateMemberStats(req, res)
+      } catch (e) {
+        e.message.should.equal('fail')
+      }
+    })
+  })
+}) 
\ No newline at end of file
diff --git a/test/unit/StatisticsService.test.mjs b/test/unit/StatisticsService.test.mjs
new file mode 100644
index 0000000..958065b
--- /dev/null
+++ b/test/unit/StatisticsService.test.mjs
@@ -0,0 +1,411 @@
+import chaiAsPromised from 'chai-as-promised';
+import chai from 'chai';
+chai.use(chaiAsPromised);
+const sinon = require('sinon');
+const StatisticsService = require('../../src/services/StatisticsService');
+const prisma = require('../../src/common/prisma').getClient();
+const helper = require('../../src/common/helper');
+const errors = require('../../src/common/errors');
+
+// Sample data
+const mockMember = { userId: 1, handle: 'testuser' };
+const validPayload = {
+  develop: [
+    {
+      challengeId: 123,
+      challengeName: 'Challenge 1',
+      ratingDate: '2023-01-01',
+      newRating: 1500,
+      subTrack: 'SRM',
+      subTrackId: 1
+    }
+  ],
+  dataScience: [
+    {
+      challengeId: 456,
+      challengeName: 'DS Challenge',
+      date: '2023-01-02',
+      rating: 1600,
+      placement: 1,
+      percentile: 99.5,
+      subTrack: 'MARATHON',
+      subTrackId: 2
+    }
+  ]
+};
+
+describe('StatisticsService.createHistoryStats', () => {
+  let sandbox;
+
+  beforeEach(() => {
+    sandbox = sinon.createSandbox();
+  });
+
+  afterEach(() => {
+    sandbox.restore();
+  });
+
+  it('should create stats history with valid data', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    sandbox.stub(prisma.memberHistoryStats, 'create').resolves({ id: 1, ...validPayload });
+    sandbox.stub(require('../../src/common/prismaHelper'), 'buildStatsResponse').returns({ id: 1, ...validPayload });
+
+    const result = await StatisticsService.createHistoryStats({ handle: 'admin' }, 'testuser', validPayload);
+    expect(result).to.have.property('id', 1);
+    expect(result.develop).to.be.an('array');
+    expect(result.dataScience).to.be.an('array');
+  });
+
+  it('should throw BadRequestError for invalid data', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    const invalidPayload = { develop: [{ challengeId: 123 }] }; // missing required fields
+    await expect(
+      StatisticsService.createHistoryStats({ handle: 'admin' }, 'testuser', invalidPayload)
+    ).to.be.rejectedWith(ErrorType, 'BadRequestError');
+  });
+
+  it('should throw ForbiddenError if user cannot manage member', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(false);
+    await expect(
+      StatisticsService.createHistoryStats({ handle: 'notadmin' }, 'testuser', validPayload)
+    ).to.be.rejectedWith(errors.ForbiddenError);
+  });
+});
+
+describe('StatisticsService.updateHistoryStats', () => {
+  let sandbox;
+
+  beforeEach(() => {
+    sandbox = sinon.createSandbox();
+  });
+
+  afterEach(() => {
+    sandbox.restore();
+  });
+
+  const mockStats = {
+    id: 1,
+    userId: 1,
+    groupId: null,
+    develop: [{ id: 10 }],
+    dataScience: [{ id: 20 }]
+  };
+  const updatePayload = {
+    develop: [
+      {
+        id: 10,
+        challengeId: 123,
+        challengeName: 'Challenge 1',
+        ratingDate: '2023-01-01',
+        newRating: 1500,
+        subTrack: 'SRM',
+        subTrackId: 1
+      },
+      {
+        challengeId: 124,
+        challengeName: 'Challenge 2',
+        ratingDate: '2023-01-02',
+        newRating: 1550,
+        subTrack: 'SRM',
+        subTrackId: 1
+      }
+    ],
+    dataScience: [
+      {
+        id: 20,
+        challengeId: 456,
+        challengeName: 'DS Challenge',
+        date: '2023-01-02',
+        rating: 1600,
+        placement: 1,
+        percentile: 99.5,
+        subTrack: 'MARATHON',
+        subTrackId: 2
+      }
+    ]
+  };
+
+  it('should update stats history with upsert/delete logic', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    sandbox.stub(prisma.memberHistoryStats, 'findFirst').resolves(mockStats);
+    const tx = {
+      memberDevelopHistoryStats: {
+        delete: sandbox.stub().resolves(),
+        update: sandbox.stub().resolves(),
+        create: sandbox.stub().resolves()
+      },
+      memberDataScienceHistoryStats: {
+        delete: sandbox.stub().resolves(),
+        update: sandbox.stub().resolves(),
+        create: sandbox.stub().resolves()
+      }
+    };
+    sandbox.stub(prisma, '$transaction').callsFake(async fn => fn(tx));
+    sandbox.stub(require('../../src/common/prismaHelper'), 'buildStatsResponse').returns({ id: 1 });
+
+    const result = await StatisticsService.updateHistoryStats({ handle: 'admin' }, 'testuser', updatePayload);
+    expect(result).to.have.property('id', 1);
+    // Check that upsert/delete stubs were called
+    expect(tx.memberDevelopHistoryStats.update.calledOnce).to.be.true;
+    expect(tx.memberDevelopHistoryStats.create.calledOnce).to.be.true;
+    expect(tx.memberDevelopHistoryStats.delete.notCalled).to.be.true;
+    expect(tx.memberDataScienceHistoryStats.update.calledOnce).to.be.true;
+    expect(tx.memberDataScienceHistoryStats.create.notCalled).to.be.true;
+    expect(tx.memberDataScienceHistoryStats.delete.notCalled).to.be.true;
+  });
+
+  it('should throw NotFoundError if stats record not found', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    sandbox.stub(prisma.memberHistoryStats, 'findFirst').resolves(null);
+    await expect(
+      StatisticsService.updateHistoryStats({ handle: 'admin' }, 'testuser', updatePayload)
+    ).to.be.rejectedWith(errors.NotFoundError);
+  });
+
+  it('should throw BadRequestError for invalid data', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    const invalidPayload = { develop: [{ id: 10 }] }; // missing required fields
+    await expect(
+      StatisticsService.updateHistoryStats({ handle: 'admin' }, 'testuser', invalidPayload)
+    ).to.be.rejectedWith(errors.BadRequestError);
+  });
+
+  it('should throw ForbiddenError if user cannot manage member', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(false);
+    await expect(
+      StatisticsService.updateHistoryStats({ handle: 'notadmin' }, 'testuser', updatePayload)
+    ).to.be.rejectedWith(errors.ForbiddenError);
+  });
+});
+
+describe('StatisticsService.createMemberStats', () => {
+  let sandbox;
+
+  beforeEach(() => {
+    sandbox = sinon.createSandbox();
+  });
+
+  afterEach(() => {
+    sandbox.restore();
+  });
+
+  const validPayload = {
+    challenges: 5,
+    wins: 2,
+    develop: {
+      challenges: 3,
+      wins: 1,
+      mostRecentSubmission: '2023-01-01',
+      mostRecentEventDate: '2023-01-02',
+      items: [
+        {
+          name: 'SRM',
+          subTrackId: 1,
+          challenges: 2,
+          wins: 1
+        }
+      ]
+    },
+    design: {
+      challenges: 2,
+      wins: 1,
+      items: []
+    },
+    dataScience: {
+      challenges: 1,
+      wins: 0,
+      items: []
+    },
+    copilot: {
+      challenges: 0,
+      wins: 0,
+      items: []
+    }
+  };
+
+  it('should create member stats with nested data', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    sandbox.stub(prisma.memberStats, 'create').resolves({ id: 1, ...validPayload });
+    sandbox.stub(require('../../src/common/prismaHelper'), 'buildStatsResponse').returns({ id: 1, ...validPayload });
+
+    const result = await StatisticsService.createMemberStats({ handle: 'admin' }, 'testuser', validPayload);
+    expect(result).to.have.property('id', 1);
+    expect(result.develop).to.be.an('object');
+    expect(result.design).to.be.an('object');
+    expect(result.dataScience).to.be.an('object');
+    expect(result.copilot).to.be.an('object');
+  });
+
+  it('should throw BadRequestError for invalid data', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    const invalidPayload = { develop: { items: [{}] } }; // missing required fields
+    await expect(
+      StatisticsService.createMemberStats({ handle: 'admin' }, 'testuser', invalidPayload)
+    ).to.be.rejectedWith(errors.BadRequestError);
+  });
+
+  it('should throw ForbiddenError if user cannot manage member', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(false);
+    await expect(
+      StatisticsService.createMemberStats({ handle: 'notadmin' }, 'testuser', validPayload)
+    ).to.be.rejectedWith(errors.ForbiddenError);
+  });
+});
+
+describe('StatisticsService.updateMemberStats', () => {
+  let sandbox;
+
+  beforeEach(() => {
+    sandbox = sinon.createSandbox();
+  });
+
+  afterEach(() => {
+    sandbox.restore();
+  });
+
+  const mockStats = {
+    id: 1,
+    userId: 1,
+    groupId: null,
+    develop: { items: [{ id: 10 }] },
+    design: { items: [{ id: 20 }] },
+    dataScience: { items: [{ id: 30 }] },
+    copilot: { items: [{ id: 40 }] }
+  };
+  const updatePayload = {
+    develop: {
+      items: [
+        {
+          id: 10,
+          name: 'SRM',
+          subTrackId: 1,
+          challenges: 2,
+          wins: 1
+        },
+        {
+          name: 'SRM2',
+          subTrackId: 2,
+          challenges: 1,
+          wins: 0
+        }
+      ]
+    },
+    design: {
+      items: [
+        {
+          id: 20,
+          name: 'Design',
+          subTrackId: 3,
+          challenges: 1,
+          wins: 1
+        }
+      ]
+    },
+    dataScience: {
+      items: [
+        {
+          id: 30,
+          name: 'DS',
+          subTrackId: 4,
+          challenges: 1,
+          wins: 0
+        }
+      ]
+    },
+    copilot: {
+      items: [
+        {
+          id: 40,
+          name: 'Copilot',
+          subTrackId: 5,
+          challenges: 0,
+          wins: 0
+        }
+      ]
+    }
+  };
+
+  it('should update member stats with partial updates and deletions', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    sandbox.stub(prisma.memberStats, 'findFirst').resolves(mockStats);
+    const tx = {
+      memberDevelopStatsItem: {
+        delete: sandbox.stub().resolves(),
+        update: sandbox.stub().resolves(),
+        create: sandbox.stub().resolves()
+      },
+      memberDesignStatsItem: {
+        delete: sandbox.stub().resolves(),
+        update: sandbox.stub().resolves(),
+        create: sandbox.stub().resolves()
+      },
+      memberDataScienceStatsItem: {
+        delete: sandbox.stub().resolves(),
+        update: sandbox.stub().resolves(),
+        create: sandbox.stub().resolves()
+      },
+      memberCopilotStatsItem: {
+        delete: sandbox.stub().resolves(),
+        update: sandbox.stub().resolves(),
+        create: sandbox.stub().resolves()
+      },
+      memberStats: {
+        update: sandbox.stub().resolves(mockStats)
+      }
+    };
+    sandbox.stub(prisma, '$transaction').callsFake(async fn => fn(tx));
+    sandbox.stub(require('../../src/common/prismaHelper'), 'buildStatsResponse').returns({ id: 1 });
+
+    const result = await StatisticsService.updateMemberStats({ handle: 'admin' }, 'testuser', updatePayload);
+    expect(result).to.have.property('id', 1);
+    expect(tx.memberDevelopStatsItem.update.calledOnce).to.be.true;
+    expect(tx.memberDevelopStatsItem.create.calledOnce).to.be.true;
+    expect(tx.memberDevelopStatsItem.delete.notCalled).to.be.true;
+    expect(tx.memberDesignStatsItem.update.calledOnce).to.be.true;
+    expect(tx.memberDesignStatsItem.create.notCalled).to.be.true;
+    expect(tx.memberDesignStatsItem.delete.notCalled).to.be.true;
+    expect(tx.memberDataScienceStatsItem.update.calledOnce).to.be.true;
+    expect(tx.memberDataScienceStatsItem.create.notCalled).to.be.true;
+    expect(tx.memberDataScienceStatsItem.delete.notCalled).to.be.true;
+    expect(tx.memberCopilotStatsItem.update.calledOnce).to.be.true;
+    expect(tx.memberCopilotStatsItem.create.notCalled).to.be.true;
+    expect(tx.memberCopilotStatsItem.delete.notCalled).to.be.true;
+  });
+
+  it('should throw NotFoundError if stats record not found', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    sandbox.stub(prisma.memberStats, 'findFirst').resolves(null);
+    await expect(
+      StatisticsService.updateMemberStats({ handle: 'admin' }, 'testuser', updatePayload)
+    ).to.be.rejectedWith(errors.NotFoundError);
+  });
+
+  it('should throw BadRequestError for invalid data', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(true);
+    const invalidPayload = { develop: { items: [{}] } }; // missing required fields
+    await expect(
+      StatisticsService.updateMemberStats({ handle: 'admin' }, 'testuser', invalidPayload)
+    ).to.be.rejectedWith(errors.BadRequestError);
+  });
+
+  it('should throw ForbiddenError if user cannot manage member', async () => {
+    sandbox.stub(helper, 'getMemberByHandle').resolves(mockMember);
+    sandbox.stub(helper, 'canManageMember').returns(false);
+    await expect(
+      StatisticsService.updateMemberStats({ handle: 'notadmin' }, 'testuser', updatePayload)
+    ).to.be.rejectedWith(errors.ForbiddenError);
+  });
+}); 
\ No newline at end of file
